const dispJSON = {"1+8.06051*10**-5+2.480990*10**-2/(132.274-lambda**-2)+1.74557*10**-4/(39.32957-lambda**-2)":{"GDu":"(n - lambda * (-2.48099e+5 / 5e+6 / (66137 / 500 - 1 / lambda ** 2) ** 2 + -1.74557e+5 / 5e+8 / (3.932957e+6 / 1e+5 - 1 / lambda ** 2) ** 2) / lambda ** 3) / c","GDDu":"lambda**3 * (3 * (2.48099e+5 / 5e+6 / (66137 / 500 - 1 / lambda ** 2) ** 2 + 1.74557e+5 / 5e+8 / (3.932957e+6 / 1e+5 - 1 / lambda ** 2) ** 2) + ((lambda ** 4 * 3.932957e+6 / 1e+5 - lambda ** 2) * 1.74557e+5 / 1.25e+8 / (3.932957e+6 / 1e+5 - 1 / lambda ** 2) ** 4 + (lambda ** 4 * 66137 / 500 - lambda ** 2) * 2.48099e+5 / 1.25e+6 / (66137 / 500 - 1 / lambda ** 2) ** 4) / lambda ** 6) / lambda ** 4 / (2 * Math.PI * c**2)","TODu":"(-1) * lambda**4 * (lambda * (((lambda ** 5 * 3.932957e+6 / 1e+5 - lambda ** 3) * -1.74557e+5 / 1.5625e+7 / (3.932957e+6 / 1e+5 - 1 / lambda ** 2) ** 5 + (lambda ** 5 * 66137 / 500 - lambda ** 3) * -2.48099e+5 / 1.5625e+5 / (66137 / 500 - 1 / lambda ** 2) ** 5 + 6 * lambda ** 3 * ((lambda ** 4 * 3.932957e+6 / 1e+5 - lambda ** 2) * -1.74557e+5 / 1.25e+8 / (3.932957e+6 / 1e+5 - 1 / lambda ** 2) ** 4 + (lambda ** 4 * 66137 / 500 - lambda ** 2) * -2.48099e+5 / 1.25e+6 / (66137 / 500 - 1 / lambda ** 2) ** 4)) / lambda ** 4 + (lambda ** 3 * 3.932957e+6 / 25000 - 2 * lambda) * 1.74557e+5 / 1.25e+8 / (3.932957e+6 / 1e+5 - 1 / lambda ** 2) ** 4 + (lambda ** 3 * 66137 / 125 - 2 * lambda) * 2.48099e+5 / 1.25e+6 / (66137 / 500 - 1 / lambda ** 2) ** 4 + lambda ** 3 * (3 * (-2.48099e+5 / 1.25e+6 / (66137 / 500 - 1 / lambda ** 2) ** 3 + -1.74557e+5 / 1.25e+8 / (3.932957e+6 / 1e+5 - 1 / lambda ** 2) ** 3) + 4 * ((lambda ** 4 * 3.932957e+6 / 1e+5 - lambda ** 2) * -1.74557e+5 / 1.25e+8 / (3.932957e+6 / 1e+5 - 1 / lambda ** 2) ** 4 + (lambda ** 4 * 66137 / 500 - lambda ** 2) * -2.48099e+5 / 1.25e+6 / (66137 / 500 - 1 / lambda ** 2) ** 4 - 3 * lambda ** 6 * (2.48099e+5 / 5e+6 / (66137 / 500 - 1 / lambda ** 2) ** 2 + 1.74557e+5 / 5e+8 / (3.932957e+6 / 1e+5 - 1 / lambda ** 2) ** 2)) * lambda ** (-2) / lambda ** 2)) / lambda ** 10 + 3 * (3 * (2.48099e+5 / 5e+6 / (66137 / 500 - 1 / lambda ** 2) ** 2 + 1.74557e+5 / 5e+8 / (3.932957e+6 / 1e+5 - 1 / lambda ** 2) ** 2) + ((lambda ** 4 * 3.932957e+6 / 1e+5 - lambda ** 2) * 1.74557e+5 / 1.25e+8 / (3.932957e+6 / 1e+5 - 1 / lambda ** 2) ** 4 + (lambda ** 4 * 66137 / 500 - lambda ** 2) * 2.48099e+5 / 1.25e+6 / (66137 / 500 - 1 / lambda ** 2) ** 4) / lambda ** 6) / lambda ** 4) / ((2 * Math.PI)**2 * c**3)"},"sqrt(1+0.6961663*lambda**2/(lambda**2-0.0684043**2)+0.4079426*lambda**2/(lambda**2-0.1162414**2)+0.8974794*lambda**2/(lambda**2-9.896161**2))":{"GDu":"(n - lambda * (lambda * (4.487397e+6 / 2.5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) + 6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) + 2.039713e+6 / 2.5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13)) + lambda ** 3 * (-4.487397e+6 / 2.5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 2 + -6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 2 + -2.039713e+6 / 2.5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 2)) / 2 / Math.sqrt(lambda ** 2 * (6.961663e+6 / 1e+7 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) + 2.039713e+6 / 5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) + 4.487397e+6 / 5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12)) + 1)) / c","GDDu":"lambda**3 * ((lambda ** 2 * (-4.487397e+6 / 1.25e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 2 + 3 * (-4.487397e+6 / 2.5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 2 + -6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 2 + -2.039713e+6 / 2.5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 2) + -6.961663e+6 / 2.5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 2 + -2.039713e+6 / 1.25e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 2) + lambda ** 4 * (4.487397e+6 / 6.25e+5 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 3 + 6.961663e+6 / 1.25e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 3 + 2.039713e+6 / 6.25e+5 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 3) + 4.487397e+6 / 2.5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) + 6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) + 2.039713e+6 / 2.5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13)) / 2 + (lambda * (4.487397e+6 / 2.5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) + 6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) + 2.039713e+6 / 2.5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13)) + lambda ** 3 * (-4.487397e+6 / 2.5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 2 + -6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 2 + -2.039713e+6 / 2.5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 2)) * (lambda ** 3 * (-6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 2 + -2.039713e+6 / 2.5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 2 + -4.487397e+6 / 2.5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 2) + 2 * lambda * (6.961663e+6 / 1e+7 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) + 2.039713e+6 / 5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) + 4.487397e+6 / 5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12))) * -1 / 4 / Math.sqrt(lambda ** 2 * (6.961663e+6 / 1e+7 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) + 2.039713e+6 / 5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) + 4.487397e+6 / 5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12)) + 1) ** 2) / Math.sqrt(lambda ** 2 * (6.961663e+6 / 1e+7 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) + 2.039713e+6 / 5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) + 4.487397e+6 / 5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12)) + 1) / (2 * Math.PI * c**2)","TODu":"(-1) * lambda**4 * (lambda * (((lambda ** 3 * (-6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 2 + -2.039713e+6 / 2.5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 2 + -4.487397e+6 / 2.5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 2) + 2 * lambda * (6.961663e+6 / 1e+7 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) + 2.039713e+6 / 5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) + 4.487397e+6 / 5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12))) ** 2 * (lambda * (4.487397e+6 / 2.5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) + 6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) + 2.039713e+6 / 2.5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13)) + lambda ** 3 * (-4.487397e+6 / 2.5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 2 + -6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 2 + -2.039713e+6 / 2.5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 2)) * 3 / 8 + Math.sqrt(lambda ** 2 * (6.961663e+6 / 1e+7 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) + 2.039713e+6 / 5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) + 4.487397e+6 / 5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12)) + 1) ** 4 * (lambda * (2 * (-4.487397e+6 / 1.25e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 2 + 3 * (-4.487397e+6 / 2.5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 2 + -6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 2 + -2.039713e+6 / 2.5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 2) + -6.961663e+6 / 2.5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 2 + -2.039713e+6 / 1.25e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 2) + -4.487397e+6 / 1.25e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 2 + -6.961663e+6 / 2.5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 2 + -2.039713e+6 / 1.25e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 2) + lambda ** 3 * (7 * (4.487397e+6 / 6.25e+5 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 3 + 6.961663e+6 / 1.25e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 3 + 2.039713e+6 / 6.25e+5 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 3) + 4.487397e+6 / 3.125e+5 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 3 + 6.961663e+6 / 6.25e+5 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 3 + 2.039713e+6 / 3.125e+5 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 3) + lambda ** 5 * (-1.3462191e+7 / 3.125e+5 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 4 + -2.0884989e+7 / 6.25e+5 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 4 + -6.119139e+6 / 3.125e+5 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 4)) / 2) / Math.sqrt(lambda ** 2 * (6.961663e+6 / 1e+7 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) + 2.039713e+6 / 5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) + 4.487397e+6 / 5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12)) + 1) ** 2 + ((lambda ** 3 * (-6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 2 + -2.039713e+6 / 2.5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 2 + -4.487397e+6 / 2.5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 2) + 2 * lambda * (6.961663e+6 / 1e+7 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) + 2.039713e+6 / 5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) + 4.487397e+6 / 5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12))) * (2 * ((4.487397e+6 / 1.25e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 2 + 6.961663e+6 / 2.5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 2 + 2.039713e+6 / 1.25e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 2 - 3 * (-4.487397e+6 / 2.5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 2 + -6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 2 + -2.039713e+6 / 2.5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 2)) * lambda ** 2 + (-4.487397e+6 / 6.25e+5 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 3 + -6.961663e+6 / 1.25e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 3 + -2.039713e+6 / 6.25e+5 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 3) * lambda ** 4 + -6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14)) + -2.039713e+6 / 1.25e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) + -4.487397e+6 / 1.25e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12)) - (lambda * (4.487397e+6 / 2.5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) + 6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) + 2.039713e+6 / 2.5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13)) + lambda ** 3 * (-4.487397e+6 / 2.5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 2 + -6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 2 + -2.039713e+6 / 2.5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 2)) * (lambda ** 4 * (6.961663e+6 / 1.25e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 3 + 2.039713e+6 / 6.25e+5 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 3 + 4.487397e+6 / 6.25e+5 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 3) + 2 * (lambda ** 2 * (-6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 2 + -2.039713e+6 / 2.5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 2 + -4.487397e+6 / 2.5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 2) + 6.961663e+6 / 1e+7 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) + 2.039713e+6 / 5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) + 4.487397e+6 / 5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12)) + 3 * lambda ** 2 * (-6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 2 + -2.039713e+6 / 2.5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 2 + -4.487397e+6 / 2.5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 2))) / 4) / Math.sqrt(lambda ** 2 * (6.961663e+6 / 1e+7 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) + 2.039713e+6 / 5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) + 4.487397e+6 / 5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12)) + 1) ** 3 + 3 * ((lambda ** 2 * (-4.487397e+6 / 1.25e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 2 + 3 * (-4.487397e+6 / 2.5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 2 + -6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 2 + -2.039713e+6 / 2.5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 2) + -6.961663e+6 / 2.5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 2 + -2.039713e+6 / 1.25e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 2) + lambda ** 4 * (4.487397e+6 / 6.25e+5 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 3 + 6.961663e+6 / 1.25e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 3 + 2.039713e+6 / 6.25e+5 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 3) + 4.487397e+6 / 2.5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) + 6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) + 2.039713e+6 / 2.5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13)) / 2 + (lambda * (4.487397e+6 / 2.5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) + 6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) + 2.039713e+6 / 2.5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13)) + lambda ** 3 * (-4.487397e+6 / 2.5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 2 + -6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 2 + -2.039713e+6 / 2.5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 2)) * (lambda ** 3 * (-6.961663e+6 / 5e+6 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) ** 2 + -2.039713e+6 / 2.5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) ** 2 + -4.487397e+6 / 2.5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12) ** 2) + 2 * lambda * (6.961663e+6 / 1e+7 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) + 2.039713e+6 / 5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) + 4.487397e+6 / 5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12))) * -1 / 4 / Math.sqrt(lambda ** 2 * (6.961663e+6 / 1e+7 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) + 2.039713e+6 / 5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) + 4.487397e+6 / 5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12)) + 1) ** 2) / Math.sqrt(lambda ** 2 * (6.961663e+6 / 1e+7 / (lambda ** 2 + -4.67914825849e+11 / 1e+14) + 2.039713e+6 / 5e+6 / (lambda ** 2 + -3.37801576849e+11 / 2.5e+13) + 4.487397e+6 / 5e+6 / (lambda ** 2 + -9.7934002537921e+13 / 1e+12)) + 1)) / ((2 * Math.PI)**2 * c**3)"},"sqrt(1+1.03961212*lambda**2/(lambda**2-0.00600069867)+0.231792344*lambda**2/(lambda**2-0.0200179144)+1.01046945*lambda**2/(lambda**2-103.560653))":{"GDu":"(n - lambda * (lambda * (2.0209389 / (lambda ** 2 - 103.560653) + 2.07922424 / (lambda ** 2 - 0.00600069867) + 0.463584688 / (lambda ** 2 - 0.0200179144)) + lambda ** 3 * (-(2.07922424 / (lambda ** 2 - 0.00600069867) ** 2) + -(2.0209389 / (lambda ** 2 - 103.560653) ** 2) - 0.463584688 / (lambda ** 2 - 0.0200179144) ** 2)) / 2 / Math.sqrt(lambda ** 2 * (1.03961212 / (lambda ** 2 - 0.00600069867) + 0.231792344 / (lambda ** 2 - 0.0200179144) + 1.01046945 / (lambda ** 2 - 103.560653)) + 1)) / c","GDDu":"lambda**3 * ((lambda ** 2 * (3 * (-(2.07922424 / (lambda ** 2 - 0.00600069867) ** 2) + -(2.0209389 / (lambda ** 2 - 103.560653) ** 2) - 0.463584688 / (lambda ** 2 - 0.0200179144) ** 2) + -(4.15844848 / (lambda ** 2 - 0.00600069867) ** 2) + -(0.927169376 / (lambda ** 2 - 0.0200179144) ** 2) - 4.0418778 / (lambda ** 2 - 103.560653) ** 2) + lambda ** 4 * (8.31689696 / (lambda ** 2 - 0.00600069867) ** 3 + 8.0837556 / (lambda ** 2 - 103.560653) ** 3 + 1.854338752 / (lambda ** 2 - 0.0200179144) ** 3) + 2.07922424 / (lambda ** 2 - 0.00600069867) + 2.0209389 / (lambda ** 2 - 103.560653) + 0.463584688 / (lambda ** 2 - 0.0200179144)) / 2 + (lambda * (2.0209389 / (lambda ** 2 - 103.560653) + 2.07922424 / (lambda ** 2 - 0.00600069867) + 0.463584688 / (lambda ** 2 - 0.0200179144)) + lambda ** 3 * (-(2.07922424 / (lambda ** 2 - 0.00600069867) ** 2) + -(2.0209389 / (lambda ** 2 - 103.560653) ** 2) - 0.463584688 / (lambda ** 2 - 0.0200179144) ** 2)) * (lambda ** 3 * (-(2.07922424 / (lambda ** 2 - 0.00600069867) ** 2) + -(0.463584688 / (lambda ** 2 - 0.0200179144) ** 2) - 2.0209389 / (lambda ** 2 - 103.560653) ** 2) + 2 * lambda * (1.03961212 / (lambda ** 2 - 0.00600069867) + 0.231792344 / (lambda ** 2 - 0.0200179144) + 1.01046945 / (lambda ** 2 - 103.560653))) * -1 / 4 / Math.sqrt(lambda ** 2 * (1.03961212 / (lambda ** 2 - 0.00600069867) + 0.231792344 / (lambda ** 2 - 0.0200179144) + 1.01046945 / (lambda ** 2 - 103.560653)) + 1) ** 2) / Math.sqrt(lambda ** 2 * (1.03961212 / (lambda ** 2 - 0.00600069867) + 0.231792344 / (lambda ** 2 - 0.0200179144) + 1.01046945 / (lambda ** 2 - 103.560653)) + 1) / (2 * Math.PI * c**2)","TODu":"(-1) * lambda**4 * (lambda * (((lambda ** 3 * (-(0.463584688 / (lambda ** 2 - 0.0200179144) ** 2) + -(2.0209389 / (lambda ** 2 - 103.560653) ** 2) - 2.07922424 / (lambda ** 2 - 0.00600069867) ** 2) + 2 * lambda * (1.03961212 / (lambda ** 2 - 0.00600069867) + 0.231792344 / (lambda ** 2 - 0.0200179144) + 1.01046945 / (lambda ** 2 - 103.560653))) ** 2 * (lambda * (2.0209389 / (lambda ** 2 - 103.560653) + 2.07922424 / (lambda ** 2 - 0.00600069867) + 0.463584688 / (lambda ** 2 - 0.0200179144)) + lambda ** 3 * (-(2.0209389 / (lambda ** 2 - 103.560653) ** 2) + -(0.463584688 / (lambda ** 2 - 0.0200179144) ** 2) - 2.07922424 / (lambda ** 2 - 0.00600069867) ** 2)) * 3 / 8 + Math.sqrt(lambda ** 2 * (1.03961212 / (lambda ** 2 - 0.00600069867) + 0.231792344 / (lambda ** 2 - 0.0200179144) + 1.01046945 / (lambda ** 2 - 103.560653)) + 1) ** 4 * (lambda * (2 * (3 * (-(2.0209389 / (lambda ** 2 - 103.560653) ** 2) + -(0.463584688 / (lambda ** 2 - 0.0200179144) ** 2) - 2.07922424 / (lambda ** 2 - 0.00600069867) ** 2) + -(0.927169376 / (lambda ** 2 - 0.0200179144) ** 2) + -(4.0418778 / (lambda ** 2 - 103.560653) ** 2) - 4.15844848 / (lambda ** 2 - 0.00600069867) ** 2) + -(4.15844848 / (lambda ** 2 - 0.00600069867) ** 2) + -(4.0418778 / (lambda ** 2 - 103.560653) ** 2) - 0.927169376 / (lambda ** 2 - 0.0200179144) ** 2) + lambda ** 3 * (7 * (8.31689696 / (lambda ** 2 - 0.00600069867) ** 3 + 8.0837556 / (lambda ** 2 - 103.560653) ** 3 + 1.854338752 / (lambda ** 2 - 0.0200179144) ** 3) + 16.63379392 / (lambda ** 2 - 0.00600069867) ** 3 + 3.708677504 / (lambda ** 2 - 0.0200179144) ** 3 + 16.1675112 / (lambda ** 2 - 103.560653) ** 3) + lambda ** 5 * (-(49.90138175999999 / (lambda ** 2 - 0.00600069867) ** 4) + -(48.5025336 / (lambda ** 2 - 103.560653) ** 4) - 11.126032512 / (lambda ** 2 - 0.0200179144) ** 4)) / 2) / Math.sqrt(lambda ** 2 * (1.03961212 / (lambda ** 2 - 0.00600069867) + 0.231792344 / (lambda ** 2 - 0.0200179144) + 1.01046945 / (lambda ** 2 - 103.560653)) + 1) ** 2 + ((lambda ** 3 * (-(0.463584688 / (lambda ** 2 - 0.0200179144) ** 2) + -(2.0209389 / (lambda ** 2 - 103.560653) ** 2) - 2.07922424 / (lambda ** 2 - 0.00600069867) ** 2) + 2 * lambda * (1.03961212 / (lambda ** 2 - 0.00600069867) + 0.231792344 / (lambda ** 2 - 0.0200179144) + 1.01046945 / (lambda ** 2 - 103.560653))) * (2 * ((-(1.854338752 / (lambda ** 2 - 0.0200179144) ** 3) + -(8.31689696 / (lambda ** 2 - 0.00600069867) ** 3) - 8.0837556 / (lambda ** 2 - 103.560653) ** 3) * lambda ** 4 + (4.0418778 / (lambda ** 2 - 103.560653) ** 2 + 4.15844848 / (lambda ** 2 - 0.00600069867) ** 2 + 0.927169376 / (lambda ** 2 - 0.0200179144) ** 2 - 3 * (-(2.0209389 / (lambda ** 2 - 103.560653) ** 2) + -(0.463584688 / (lambda ** 2 - 0.0200179144) ** 2) - 2.07922424 / (lambda ** 2 - 0.00600069867) ** 2)) * lambda ** 2 - 2.0209389 / (lambda ** 2 - 103.560653)) + -(4.15844848 / (lambda ** 2 - 0.00600069867)) - 0.927169376 / (lambda ** 2 - 0.0200179144)) - (lambda * (2.0209389 / (lambda ** 2 - 103.560653) + 2.07922424 / (lambda ** 2 - 0.00600069867) + 0.463584688 / (lambda ** 2 - 0.0200179144)) + lambda ** 3 * (-(2.0209389 / (lambda ** 2 - 103.560653) ** 2) + -(0.463584688 / (lambda ** 2 - 0.0200179144) ** 2) - 2.07922424 / (lambda ** 2 - 0.00600069867) ** 2)) * (lambda ** 4 * (8.31689696 / (lambda ** 2 - 0.00600069867) ** 3 + 1.854338752 / (lambda ** 2 - 0.0200179144) ** 3 + 8.0837556 / (lambda ** 2 - 103.560653) ** 3) + 2 * (lambda ** 2 * (-(2.07922424 / (lambda ** 2 - 0.00600069867) ** 2) + -(0.463584688 / (lambda ** 2 - 0.0200179144) ** 2) - 2.0209389 / (lambda ** 2 - 103.560653) ** 2) + 1.03961212 / (lambda ** 2 - 0.00600069867) + 0.231792344 / (lambda ** 2 - 0.0200179144) + 1.01046945 / (lambda ** 2 - 103.560653)) + 3 * lambda ** 2 * (-(0.463584688 / (lambda ** 2 - 0.0200179144) ** 2) + -(2.0209389 / (lambda ** 2 - 103.560653) ** 2) - 2.07922424 / (lambda ** 2 - 0.00600069867) ** 2))) / 4) / Math.sqrt(lambda ** 2 * (1.03961212 / (lambda ** 2 - 0.00600069867) + 0.231792344 / (lambda ** 2 - 0.0200179144) + 1.01046945 / (lambda ** 2 - 103.560653)) + 1) ** 3 + 3 * ((lambda ** 2 * (3 * (-(2.07922424 / (lambda ** 2 - 0.00600069867) ** 2) + -(2.0209389 / (lambda ** 2 - 103.560653) ** 2) - 0.463584688 / (lambda ** 2 - 0.0200179144) ** 2) + -(4.15844848 / (lambda ** 2 - 0.00600069867) ** 2) + -(0.927169376 / (lambda ** 2 - 0.0200179144) ** 2) - 4.0418778 / (lambda ** 2 - 103.560653) ** 2) + lambda ** 4 * (8.31689696 / (lambda ** 2 - 0.00600069867) ** 3 + 8.0837556 / (lambda ** 2 - 103.560653) ** 3 + 1.854338752 / (lambda ** 2 - 0.0200179144) ** 3) + 2.07922424 / (lambda ** 2 - 0.00600069867) + 2.0209389 / (lambda ** 2 - 103.560653) + 0.463584688 / (lambda ** 2 - 0.0200179144)) / 2 + (lambda * (2.0209389 / (lambda ** 2 - 103.560653) + 2.07922424 / (lambda ** 2 - 0.00600069867) + 0.463584688 / (lambda ** 2 - 0.0200179144)) + lambda ** 3 * (-(2.07922424 / (lambda ** 2 - 0.00600069867) ** 2) + -(2.0209389 / (lambda ** 2 - 103.560653) ** 2) - 0.463584688 / (lambda ** 2 - 0.0200179144) ** 2)) * (lambda ** 3 * (-(2.07922424 / (lambda ** 2 - 0.00600069867) ** 2) + -(0.463584688 / (lambda ** 2 - 0.0200179144) ** 2) - 2.0209389 / (lambda ** 2 - 103.560653) ** 2) + 2 * lambda * (1.03961212 / (lambda ** 2 - 0.00600069867) + 0.231792344 / (lambda ** 2 - 0.0200179144) + 1.01046945 / (lambda ** 2 - 103.560653))) * -1 / 4 / Math.sqrt(lambda ** 2 * (1.03961212 / (lambda ** 2 - 0.00600069867) + 0.231792344 / (lambda ** 2 - 0.0200179144) + 1.01046945 / (lambda ** 2 - 103.560653)) + 1) ** 2) / Math.sqrt(lambda ** 2 * (1.03961212 / (lambda ** 2 - 0.00600069867) + 0.231792344 / (lambda ** 2 - 0.0200179144) + 1.01046945 / (lambda ** 2 - 103.560653)) + 1)) / ((2 * Math.PI)**2 * c**3)"},"sqrt(1+1.73759695*lambda**2/(lambda**2-0.013188707)+0.313747346*lambda**2/(lambda**2-0.0623068142)+1.89878101*lambda**2/(lambda**2-155.23629))":{"GDu":"(n - lambda * (lambda * (3.79756202 / (lambda ** 2 - 155.23629) + 3.4751939 / (lambda ** 2 - 0.013188707) + 0.627494692 / (lambda ** 2 - 0.0623068142)) + lambda ** 3 * (-(3.4751939 / (lambda ** 2 - 0.013188707) ** 2) + -(3.79756202 / (lambda ** 2 - 155.23629) ** 2) - 0.627494692 / (lambda ** 2 - 0.0623068142) ** 2)) / 2 / Math.sqrt(lambda ** 2 * (1.73759695 / (lambda ** 2 - 0.013188707) + 0.313747346 / (lambda ** 2 - 0.0623068142) + 1.89878101 / (lambda ** 2 - 155.23629)) + 1)) / c","GDDu":"lambda**3 * ((lambda ** 2 * (3 * (-(3.4751939 / (lambda ** 2 - 0.013188707) ** 2) + -(3.79756202 / (lambda ** 2 - 155.23629) ** 2) - 0.627494692 / (lambda ** 2 - 0.0623068142) ** 2) + -(6.9503878 / (lambda ** 2 - 0.013188707) ** 2) + -(1.254989384 / (lambda ** 2 - 0.0623068142) ** 2) - 7.59512404 / (lambda ** 2 - 155.23629) ** 2) + lambda ** 4 * (13.9007756 / (lambda ** 2 - 0.013188707) ** 3 + 15.19024808 / (lambda ** 2 - 155.23629) ** 3 + 2.509978768 / (lambda ** 2 - 0.0623068142) ** 3) + 3.4751939 / (lambda ** 2 - 0.013188707) + 3.79756202 / (lambda ** 2 - 155.23629) + 0.627494692 / (lambda ** 2 - 0.0623068142)) / 2 + (lambda * (3.79756202 / (lambda ** 2 - 155.23629) + 3.4751939 / (lambda ** 2 - 0.013188707) + 0.627494692 / (lambda ** 2 - 0.0623068142)) + lambda ** 3 * (-(3.4751939 / (lambda ** 2 - 0.013188707) ** 2) + -(3.79756202 / (lambda ** 2 - 155.23629) ** 2) - 0.627494692 / (lambda ** 2 - 0.0623068142) ** 2)) * (lambda ** 3 * (-(3.4751939 / (lambda ** 2 - 0.013188707) ** 2) + -(0.627494692 / (lambda ** 2 - 0.0623068142) ** 2) - 3.79756202 / (lambda ** 2 - 155.23629) ** 2) + 2 * lambda * (1.73759695 / (lambda ** 2 - 0.013188707) + 0.313747346 / (lambda ** 2 - 0.0623068142) + 1.89878101 / (lambda ** 2 - 155.23629))) * -1 / 4 / Math.sqrt(lambda ** 2 * (1.73759695 / (lambda ** 2 - 0.013188707) + 0.313747346 / (lambda ** 2 - 0.0623068142) + 1.89878101 / (lambda ** 2 - 155.23629)) + 1) ** 2) / Math.sqrt(lambda ** 2 * (1.73759695 / (lambda ** 2 - 0.013188707) + 0.313747346 / (lambda ** 2 - 0.0623068142) + 1.89878101 / (lambda ** 2 - 155.23629)) + 1) / (2 * Math.PI * c**2)","TODu":"(-1) * lambda**4 * (lambda * (((lambda ** 3 * (-(0.627494692 / (lambda ** 2 - 0.0623068142) ** 2) + -(3.79756202 / (lambda ** 2 - 155.23629) ** 2) - 3.4751939 / (lambda ** 2 - 0.013188707) ** 2) + 2 * lambda * (1.73759695 / (lambda ** 2 - 0.013188707) + 0.313747346 / (lambda ** 2 - 0.0623068142) + 1.89878101 / (lambda ** 2 - 155.23629))) ** 2 * (lambda * (3.79756202 / (lambda ** 2 - 155.23629) + 3.4751939 / (lambda ** 2 - 0.013188707) + 0.627494692 / (lambda ** 2 - 0.0623068142)) + lambda ** 3 * (-(3.79756202 / (lambda ** 2 - 155.23629) ** 2) + -(0.627494692 / (lambda ** 2 - 0.0623068142) ** 2) - 3.4751939 / (lambda ** 2 - 0.013188707) ** 2)) * 3 / 8 + Math.sqrt(lambda ** 2 * (1.73759695 / (lambda ** 2 - 0.013188707) + 0.313747346 / (lambda ** 2 - 0.0623068142) + 1.89878101 / (lambda ** 2 - 155.23629)) + 1) ** 4 * (lambda * (2 * (3 * (-(3.79756202 / (lambda ** 2 - 155.23629) ** 2) + -(0.627494692 / (lambda ** 2 - 0.0623068142) ** 2) - 3.4751939 / (lambda ** 2 - 0.013188707) ** 2) + -(1.254989384 / (lambda ** 2 - 0.0623068142) ** 2) + -(7.59512404 / (lambda ** 2 - 155.23629) ** 2) - 6.9503878 / (lambda ** 2 - 0.013188707) ** 2) + -(6.9503878 / (lambda ** 2 - 0.013188707) ** 2) + -(7.59512404 / (lambda ** 2 - 155.23629) ** 2) - 1.254989384 / (lambda ** 2 - 0.0623068142) ** 2) + lambda ** 3 * (7 * (13.9007756 / (lambda ** 2 - 0.013188707) ** 3 + 15.19024808 / (lambda ** 2 - 155.23629) ** 3 + 2.509978768 / (lambda ** 2 - 0.0623068142) ** 3) + 27.8015512 / (lambda ** 2 - 0.013188707) ** 3 + 5.019957536 / (lambda ** 2 - 0.0623068142) ** 3 + 30.38049616 / (lambda ** 2 - 155.23629) ** 3) + lambda ** 5 * (-(83.40465359999999 / (lambda ** 2 - 0.013188707) ** 4) + -(91.14148847999999 / (lambda ** 2 - 155.23629) ** 4) - 15.059872608 / (lambda ** 2 - 0.0623068142) ** 4)) / 2) / Math.sqrt(lambda ** 2 * (1.73759695 / (lambda ** 2 - 0.013188707) + 0.313747346 / (lambda ** 2 - 0.0623068142) + 1.89878101 / (lambda ** 2 - 155.23629)) + 1) ** 2 + ((lambda ** 3 * (-(0.627494692 / (lambda ** 2 - 0.0623068142) ** 2) + -(3.79756202 / (lambda ** 2 - 155.23629) ** 2) - 3.4751939 / (lambda ** 2 - 0.013188707) ** 2) + 2 * lambda * (1.73759695 / (lambda ** 2 - 0.013188707) + 0.313747346 / (lambda ** 2 - 0.0623068142) + 1.89878101 / (lambda ** 2 - 155.23629))) * (2 * ((-(2.509978768 / (lambda ** 2 - 0.0623068142) ** 3) + -(13.9007756 / (lambda ** 2 - 0.013188707) ** 3) - 15.19024808 / (lambda ** 2 - 155.23629) ** 3) * lambda ** 4 + (7.59512404 / (lambda ** 2 - 155.23629) ** 2 + 6.9503878 / (lambda ** 2 - 0.013188707) ** 2 + 1.254989384 / (lambda ** 2 - 0.0623068142) ** 2 - 3 * (-(3.79756202 / (lambda ** 2 - 155.23629) ** 2) + -(0.627494692 / (lambda ** 2 - 0.0623068142) ** 2) - 3.4751939 / (lambda ** 2 - 0.013188707) ** 2)) * lambda ** 2 - 3.79756202 / (lambda ** 2 - 155.23629)) + -(6.9503878 / (lambda ** 2 - 0.013188707)) - 1.254989384 / (lambda ** 2 - 0.0623068142)) - (lambda * (3.79756202 / (lambda ** 2 - 155.23629) + 3.4751939 / (lambda ** 2 - 0.013188707) + 0.627494692 / (lambda ** 2 - 0.0623068142)) + lambda ** 3 * (-(3.79756202 / (lambda ** 2 - 155.23629) ** 2) + -(0.627494692 / (lambda ** 2 - 0.0623068142) ** 2) - 3.4751939 / (lambda ** 2 - 0.013188707) ** 2)) * (lambda ** 4 * (13.9007756 / (lambda ** 2 - 0.013188707) ** 3 + 2.509978768 / (lambda ** 2 - 0.0623068142) ** 3 + 15.19024808 / (lambda ** 2 - 155.23629) ** 3) + 2 * (lambda ** 2 * (-(3.4751939 / (lambda ** 2 - 0.013188707) ** 2) + -(0.627494692 / (lambda ** 2 - 0.0623068142) ** 2) - 3.79756202 / (lambda ** 2 - 155.23629) ** 2) + 1.73759695 / (lambda ** 2 - 0.013188707) + 0.313747346 / (lambda ** 2 - 0.0623068142) + 1.89878101 / (lambda ** 2 - 155.23629)) + 3 * lambda ** 2 * (-(0.627494692 / (lambda ** 2 - 0.0623068142) ** 2) + -(3.79756202 / (lambda ** 2 - 155.23629) ** 2) - 3.4751939 / (lambda ** 2 - 0.013188707) ** 2))) / 4) / Math.sqrt(lambda ** 2 * (1.73759695 / (lambda ** 2 - 0.013188707) + 0.313747346 / (lambda ** 2 - 0.0623068142) + 1.89878101 / (lambda ** 2 - 155.23629)) + 1) ** 3 + 3 * ((lambda ** 2 * (3 * (-(3.4751939 / (lambda ** 2 - 0.013188707) ** 2) + -(3.79756202 / (lambda ** 2 - 155.23629) ** 2) - 0.627494692 / (lambda ** 2 - 0.0623068142) ** 2) + -(6.9503878 / (lambda ** 2 - 0.013188707) ** 2) + -(1.254989384 / (lambda ** 2 - 0.0623068142) ** 2) - 7.59512404 / (lambda ** 2 - 155.23629) ** 2) + lambda ** 4 * (13.9007756 / (lambda ** 2 - 0.013188707) ** 3 + 15.19024808 / (lambda ** 2 - 155.23629) ** 3 + 2.509978768 / (lambda ** 2 - 0.0623068142) ** 3) + 3.4751939 / (lambda ** 2 - 0.013188707) + 3.79756202 / (lambda ** 2 - 155.23629) + 0.627494692 / (lambda ** 2 - 0.0623068142)) / 2 + (lambda * (3.79756202 / (lambda ** 2 - 155.23629) + 3.4751939 / (lambda ** 2 - 0.013188707) + 0.627494692 / (lambda ** 2 - 0.0623068142)) + lambda ** 3 * (-(3.4751939 / (lambda ** 2 - 0.013188707) ** 2) + -(3.79756202 / (lambda ** 2 - 155.23629) ** 2) - 0.627494692 / (lambda ** 2 - 0.0623068142) ** 2)) * (lambda ** 3 * (-(3.4751939 / (lambda ** 2 - 0.013188707) ** 2) + -(0.627494692 / (lambda ** 2 - 0.0623068142) ** 2) - 3.79756202 / (lambda ** 2 - 155.23629) ** 2) + 2 * lambda * (1.73759695 / (lambda ** 2 - 0.013188707) + 0.313747346 / (lambda ** 2 - 0.0623068142) + 1.89878101 / (lambda ** 2 - 155.23629))) * -1 / 4 / Math.sqrt(lambda ** 2 * (1.73759695 / (lambda ** 2 - 0.013188707) + 0.313747346 / (lambda ** 2 - 0.0623068142) + 1.89878101 / (lambda ** 2 - 155.23629)) + 1) ** 2) / Math.sqrt(lambda ** 2 * (1.73759695 / (lambda ** 2 - 0.013188707) + 0.313747346 / (lambda ** 2 - 0.0623068142) + 1.89878101 / (lambda ** 2 - 155.23629)) + 1)) / ((2 * Math.PI)**2 * c**3)"},"sqrt(1.33973+0.69913*lambda**2/(lambda**2-0.09374**2)+0.11994*lambda**2/(lambda**2-21.18**2)+4.35181*lambda**2/(lambda**2-38.46**2))":{"GDu":"(n - lambda * (lambda * (4.35181e+5 / 50000 / (lambda ** 2 + -3.697929e+6 / 2500) + 69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) + 5997 / 25000 / (lambda ** 2 + -1.121481e+6 / 2500)) + lambda ** 3 * (-4.35181e+5 / 50000 / (lambda ** 2 + -3.697929e+6 / 2500) ** 2 + -69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 2 + -5997 / 25000 / (lambda ** 2 + -1.121481e+6 / 2500) ** 2)) / 2 / Math.sqrt(lambda ** 2 * (69913 / 1e+5 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) + 5997 / 50000 / (lambda ** 2 + -1.121481e+6 / 2500) + 4.35181e+5 / 1e+5 / (lambda ** 2 + -3.697929e+6 / 2500)) + 1.33973e+5 / 1e+5)) / c","GDDu":"lambda**3 * ((lambda ** 2 * (-4.35181e+5 / 25000 / (lambda ** 2 + -3.697929e+6 / 2500) ** 2 + 3 * (-4.35181e+5 / 50000 / (lambda ** 2 + -3.697929e+6 / 2500) ** 2 + -69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 2 + -5997 / 25000 / (lambda ** 2 + -1.121481e+6 / 2500) ** 2) + -69913 / 25000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 2 + -5997 / 12500 / (lambda ** 2 + -1.121481e+6 / 2500) ** 2) + lambda ** 4 * (4.35181e+5 / 12500 / (lambda ** 2 + -3.697929e+6 / 2500) ** 3 + 69913 / 12500 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 3 + 5997 / 6250 / (lambda ** 2 + -1.121481e+6 / 2500) ** 3) + 4.35181e+5 / 50000 / (lambda ** 2 + -3.697929e+6 / 2500) + 69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) + 5997 / 25000 / (lambda ** 2 + -1.121481e+6 / 2500)) / 2 + (lambda * (4.35181e+5 / 50000 / (lambda ** 2 + -3.697929e+6 / 2500) + 69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) + 5997 / 25000 / (lambda ** 2 + -1.121481e+6 / 2500)) + lambda ** 3 * (-4.35181e+5 / 50000 / (lambda ** 2 + -3.697929e+6 / 2500) ** 2 + -69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 2 + -5997 / 25000 / (lambda ** 2 + -1.121481e+6 / 2500) ** 2)) * (lambda ** 3 * (-69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 2 + -5997 / 25000 / (lambda ** 2 + -1.121481e+6 / 2500) ** 2 + -4.35181e+5 / 50000 / (lambda ** 2 + -3.697929e+6 / 2500) ** 2) + 2 * lambda * (69913 / 1e+5 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) + 5997 / 50000 / (lambda ** 2 + -1.121481e+6 / 2500) + 4.35181e+5 / 1e+5 / (lambda ** 2 + -3.697929e+6 / 2500))) * -1 / 4 / Math.sqrt(lambda ** 2 * (69913 / 1e+5 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) + 5997 / 50000 / (lambda ** 2 + -1.121481e+6 / 2500) + 4.35181e+5 / 1e+5 / (lambda ** 2 + -3.697929e+6 / 2500)) + 1.33973e+5 / 1e+5) ** 2) / Math.sqrt(lambda ** 2 * (69913 / 1e+5 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) + 5997 / 50000 / (lambda ** 2 + -1.121481e+6 / 2500) + 4.35181e+5 / 1e+5 / (lambda ** 2 + -3.697929e+6 / 2500)) + 1.33973e+5 / 1e+5) / (2 * Math.PI * c**2)","TODu":"(-1) * lambda**4 * (lambda * (((lambda ** 3 * (-69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 2 + -5997 / 25000 / (lambda ** 2 + -1.121481e+6 / 2500) ** 2 + -4.35181e+5 / 50000 / (lambda ** 2 + -3.697929e+6 / 2500) ** 2) + 2 * lambda * (69913 / 1e+5 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) + 5997 / 50000 / (lambda ** 2 + -1.121481e+6 / 2500) + 4.35181e+5 / 1e+5 / (lambda ** 2 + -3.697929e+6 / 2500))) ** 2 * (lambda * (4.35181e+5 / 50000 / (lambda ** 2 + -3.697929e+6 / 2500) + 69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) + 5997 / 25000 / (lambda ** 2 + -1.121481e+6 / 2500)) + lambda ** 3 * (-4.35181e+5 / 50000 / (lambda ** 2 + -3.697929e+6 / 2500) ** 2 + -69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 2 + -5997 / 25000 / (lambda ** 2 + -1.121481e+6 / 2500) ** 2)) * 3 / 8 + Math.sqrt(lambda ** 2 * (69913 / 1e+5 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) + 5997 / 50000 / (lambda ** 2 + -1.121481e+6 / 2500) + 4.35181e+5 / 1e+5 / (lambda ** 2 + -3.697929e+6 / 2500)) + 1.33973e+5 / 1e+5) ** 4 * (lambda * (2 * (-4.35181e+5 / 25000 / (lambda ** 2 + -3.697929e+6 / 2500) ** 2 + 3 * (-4.35181e+5 / 50000 / (lambda ** 2 + -3.697929e+6 / 2500) ** 2 + -69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 2 + -5997 / 25000 / (lambda ** 2 + -1.121481e+6 / 2500) ** 2) + -69913 / 25000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 2 + -5997 / 12500 / (lambda ** 2 + -1.121481e+6 / 2500) ** 2) + -4.35181e+5 / 25000 / (lambda ** 2 + -3.697929e+6 / 2500) ** 2 + -69913 / 25000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 2 + -5997 / 12500 / (lambda ** 2 + -1.121481e+6 / 2500) ** 2) + lambda ** 3 * (7 * (4.35181e+5 / 12500 / (lambda ** 2 + -3.697929e+6 / 2500) ** 3 + 69913 / 12500 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 3 + 5997 / 6250 / (lambda ** 2 + -1.121481e+6 / 2500) ** 3) + 4.35181e+5 / 6250 / (lambda ** 2 + -3.697929e+6 / 2500) ** 3 + 69913 / 6250 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 3 + 5997 / 3125 / (lambda ** 2 + -1.121481e+6 / 2500) ** 3) + lambda ** 5 * (-1.305543e+6 / 6250 / (lambda ** 2 + -3.697929e+6 / 2500) ** 4 + -2.09739e+5 / 6250 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 4 + -17991 / 3125 / (lambda ** 2 + -1.121481e+6 / 2500) ** 4)) / 2) / Math.sqrt(lambda ** 2 * (69913 / 1e+5 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) + 5997 / 50000 / (lambda ** 2 + -1.121481e+6 / 2500) + 4.35181e+5 / 1e+5 / (lambda ** 2 + -3.697929e+6 / 2500)) + 1.33973e+5 / 1e+5) ** 2 + ((lambda ** 3 * (-69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 2 + -5997 / 25000 / (lambda ** 2 + -1.121481e+6 / 2500) ** 2 + -4.35181e+5 / 50000 / (lambda ** 2 + -3.697929e+6 / 2500) ** 2) + 2 * lambda * (69913 / 1e+5 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) + 5997 / 50000 / (lambda ** 2 + -1.121481e+6 / 2500) + 4.35181e+5 / 1e+5 / (lambda ** 2 + -3.697929e+6 / 2500))) * (2 * ((4.35181e+5 / 25000 / (lambda ** 2 + -3.697929e+6 / 2500) ** 2 + 69913 / 25000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 2 + 5997 / 12500 / (lambda ** 2 + -1.121481e+6 / 2500) ** 2 - 3 * (-4.35181e+5 / 50000 / (lambda ** 2 + -3.697929e+6 / 2500) ** 2 + -69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 2 + -5997 / 25000 / (lambda ** 2 + -1.121481e+6 / 2500) ** 2)) * lambda ** 2 + (-4.35181e+5 / 12500 / (lambda ** 2 + -3.697929e+6 / 2500) ** 3 + -69913 / 12500 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 3 + -5997 / 6250 / (lambda ** 2 + -1.121481e+6 / 2500) ** 3) * lambda ** 4 + -69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9)) + -5997 / 12500 / (lambda ** 2 + -1.121481e+6 / 2500) + -4.35181e+5 / 25000 / (lambda ** 2 + -3.697929e+6 / 2500)) - (lambda * (4.35181e+5 / 50000 / (lambda ** 2 + -3.697929e+6 / 2500) + 69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) + 5997 / 25000 / (lambda ** 2 + -1.121481e+6 / 2500)) + lambda ** 3 * (-4.35181e+5 / 50000 / (lambda ** 2 + -3.697929e+6 / 2500) ** 2 + -69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 2 + -5997 / 25000 / (lambda ** 2 + -1.121481e+6 / 2500) ** 2)) * (lambda ** 4 * (69913 / 12500 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 3 + 5997 / 6250 / (lambda ** 2 + -1.121481e+6 / 2500) ** 3 + 4.35181e+5 / 12500 / (lambda ** 2 + -3.697929e+6 / 2500) ** 3) + 2 * (lambda ** 2 * (-69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 2 + -5997 / 25000 / (lambda ** 2 + -1.121481e+6 / 2500) ** 2 + -4.35181e+5 / 50000 / (lambda ** 2 + -3.697929e+6 / 2500) ** 2) + 69913 / 1e+5 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) + 5997 / 50000 / (lambda ** 2 + -1.121481e+6 / 2500) + 4.35181e+5 / 1e+5 / (lambda ** 2 + -3.697929e+6 / 2500)) + 3 * lambda ** 2 * (-69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 2 + -5997 / 25000 / (lambda ** 2 + -1.121481e+6 / 2500) ** 2 + -4.35181e+5 / 50000 / (lambda ** 2 + -3.697929e+6 / 2500) ** 2))) / 4) / Math.sqrt(lambda ** 2 * (69913 / 1e+5 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) + 5997 / 50000 / (lambda ** 2 + -1.121481e+6 / 2500) + 4.35181e+5 / 1e+5 / (lambda ** 2 + -3.697929e+6 / 2500)) + 1.33973e+5 / 1e+5) ** 3 + 3 * ((lambda ** 2 * (-4.35181e+5 / 25000 / (lambda ** 2 + -3.697929e+6 / 2500) ** 2 + 3 * (-4.35181e+5 / 50000 / (lambda ** 2 + -3.697929e+6 / 2500) ** 2 + -69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 2 + -5997 / 25000 / (lambda ** 2 + -1.121481e+6 / 2500) ** 2) + -69913 / 25000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 2 + -5997 / 12500 / (lambda ** 2 + -1.121481e+6 / 2500) ** 2) + lambda ** 4 * (4.35181e+5 / 12500 / (lambda ** 2 + -3.697929e+6 / 2500) ** 3 + 69913 / 12500 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 3 + 5997 / 6250 / (lambda ** 2 + -1.121481e+6 / 2500) ** 3) + 4.35181e+5 / 50000 / (lambda ** 2 + -3.697929e+6 / 2500) + 69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) + 5997 / 25000 / (lambda ** 2 + -1.121481e+6 / 2500)) / 2 + (lambda * (4.35181e+5 / 50000 / (lambda ** 2 + -3.697929e+6 / 2500) + 69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) + 5997 / 25000 / (lambda ** 2 + -1.121481e+6 / 2500)) + lambda ** 3 * (-4.35181e+5 / 50000 / (lambda ** 2 + -3.697929e+6 / 2500) ** 2 + -69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 2 + -5997 / 25000 / (lambda ** 2 + -1.121481e+6 / 2500) ** 2)) * (lambda ** 3 * (-69913 / 50000 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) ** 2 + -5997 / 25000 / (lambda ** 2 + -1.121481e+6 / 2500) ** 2 + -4.35181e+5 / 50000 / (lambda ** 2 + -3.697929e+6 / 2500) ** 2) + 2 * lambda * (69913 / 1e+5 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) + 5997 / 50000 / (lambda ** 2 + -1.121481e+6 / 2500) + 4.35181e+5 / 1e+5 / (lambda ** 2 + -3.697929e+6 / 2500))) * -1 / 4 / Math.sqrt(lambda ** 2 * (69913 / 1e+5 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) + 5997 / 50000 / (lambda ** 2 + -1.121481e+6 / 2500) + 4.35181e+5 / 1e+5 / (lambda ** 2 + -3.697929e+6 / 2500)) + 1.33973e+5 / 1e+5) ** 2) / Math.sqrt(lambda ** 2 * (69913 / 1e+5 / (lambda ** 2 + -2.1967969e+7 / 2.5e+9) + 5997 / 50000 / (lambda ** 2 + -1.121481e+6 / 2500) + 4.35181e+5 / 1e+5 / (lambda ** 2 + -3.697929e+6 / 2500)) + 1.33973e+5 / 1e+5)) / ((2 * Math.PI)**2 * c**3)"},"sqrt(1.33973+0.81070*lambda**2/(lambda**2-0.10065**2)+0.19652*lambda**2/(lambda**2-29.87**2)+4.52469*lambda**2/(lambda**2-53.82**2))":{"GDu":"(n - lambda * (lambda * (4.52469e+5 / 50000 / (lambda ** 2 + -7.241481e+6 / 2500) + 8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8) + 4913 / 12500 / (lambda ** 2 + -8.922169e+6 / 10000)) + lambda ** 3 * (-4.52469e+5 / 50000 / (lambda ** 2 + -7.241481e+6 / 2500) ** 2 + -8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 2 + -4913 / 12500 / (lambda ** 2 + -8.922169e+6 / 10000) ** 2)) / 2 / Math.sqrt(lambda ** 2 * (8107 / 10000 / (lambda ** 2 + -4.052169e+6 / 4e+8) + 4913 / 25000 / (lambda ** 2 + -8.922169e+6 / 10000) + 4.52469e+5 / 1e+5 / (lambda ** 2 + -7.241481e+6 / 2500)) + 1.33973e+5 / 1e+5)) / c","GDDu":"lambda**3 * ((lambda ** 2 * (-4.52469e+5 / 25000 / (lambda ** 2 + -7.241481e+6 / 2500) ** 2 + 3 * (-4.52469e+5 / 50000 / (lambda ** 2 + -7.241481e+6 / 2500) ** 2 + -8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 2 + -4913 / 12500 / (lambda ** 2 + -8.922169e+6 / 10000) ** 2) + -8107 / 2500 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 2 + -4913 / 6250 / (lambda ** 2 + -8.922169e+6 / 10000) ** 2) + lambda ** 4 * (4.52469e+5 / 12500 / (lambda ** 2 + -7.241481e+6 / 2500) ** 3 + 8107 / 1250 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 3 + 4913 / 3125 / (lambda ** 2 + -8.922169e+6 / 10000) ** 3) + 4.52469e+5 / 50000 / (lambda ** 2 + -7.241481e+6 / 2500) + 8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8) + 4913 / 12500 / (lambda ** 2 + -8.922169e+6 / 10000)) / 2 + (lambda * (4.52469e+5 / 50000 / (lambda ** 2 + -7.241481e+6 / 2500) + 8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8) + 4913 / 12500 / (lambda ** 2 + -8.922169e+6 / 10000)) + lambda ** 3 * (-4.52469e+5 / 50000 / (lambda ** 2 + -7.241481e+6 / 2500) ** 2 + -8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 2 + -4913 / 12500 / (lambda ** 2 + -8.922169e+6 / 10000) ** 2)) * (lambda ** 3 * (-8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 2 + -4913 / 12500 / (lambda ** 2 + -8.922169e+6 / 10000) ** 2 + -4.52469e+5 / 50000 / (lambda ** 2 + -7.241481e+6 / 2500) ** 2) + 2 * lambda * (8107 / 10000 / (lambda ** 2 + -4.052169e+6 / 4e+8) + 4913 / 25000 / (lambda ** 2 + -8.922169e+6 / 10000) + 4.52469e+5 / 1e+5 / (lambda ** 2 + -7.241481e+6 / 2500))) * -1 / 4 / Math.sqrt(lambda ** 2 * (8107 / 10000 / (lambda ** 2 + -4.052169e+6 / 4e+8) + 4913 / 25000 / (lambda ** 2 + -8.922169e+6 / 10000) + 4.52469e+5 / 1e+5 / (lambda ** 2 + -7.241481e+6 / 2500)) + 1.33973e+5 / 1e+5) ** 2) / Math.sqrt(lambda ** 2 * (8107 / 10000 / (lambda ** 2 + -4.052169e+6 / 4e+8) + 4913 / 25000 / (lambda ** 2 + -8.922169e+6 / 10000) + 4.52469e+5 / 1e+5 / (lambda ** 2 + -7.241481e+6 / 2500)) + 1.33973e+5 / 1e+5) / (2 * Math.PI * c**2)","TODu":"(-1) * lambda**4 * (lambda * (((lambda ** 3 * (-8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 2 + -4913 / 12500 / (lambda ** 2 + -8.922169e+6 / 10000) ** 2 + -4.52469e+5 / 50000 / (lambda ** 2 + -7.241481e+6 / 2500) ** 2) + 2 * lambda * (8107 / 10000 / (lambda ** 2 + -4.052169e+6 / 4e+8) + 4913 / 25000 / (lambda ** 2 + -8.922169e+6 / 10000) + 4.52469e+5 / 1e+5 / (lambda ** 2 + -7.241481e+6 / 2500))) ** 2 * (lambda * (4.52469e+5 / 50000 / (lambda ** 2 + -7.241481e+6 / 2500) + 8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8) + 4913 / 12500 / (lambda ** 2 + -8.922169e+6 / 10000)) + lambda ** 3 * (-4.52469e+5 / 50000 / (lambda ** 2 + -7.241481e+6 / 2500) ** 2 + -8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 2 + -4913 / 12500 / (lambda ** 2 + -8.922169e+6 / 10000) ** 2)) * 3 / 8 + Math.sqrt(lambda ** 2 * (8107 / 10000 / (lambda ** 2 + -4.052169e+6 / 4e+8) + 4913 / 25000 / (lambda ** 2 + -8.922169e+6 / 10000) + 4.52469e+5 / 1e+5 / (lambda ** 2 + -7.241481e+6 / 2500)) + 1.33973e+5 / 1e+5) ** 4 * (lambda * (2 * (-4.52469e+5 / 25000 / (lambda ** 2 + -7.241481e+6 / 2500) ** 2 + 3 * (-4.52469e+5 / 50000 / (lambda ** 2 + -7.241481e+6 / 2500) ** 2 + -8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 2 + -4913 / 12500 / (lambda ** 2 + -8.922169e+6 / 10000) ** 2) + -8107 / 2500 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 2 + -4913 / 6250 / (lambda ** 2 + -8.922169e+6 / 10000) ** 2) + -4.52469e+5 / 25000 / (lambda ** 2 + -7.241481e+6 / 2500) ** 2 + -8107 / 2500 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 2 + -4913 / 6250 / (lambda ** 2 + -8.922169e+6 / 10000) ** 2) + lambda ** 3 * (7 * (4.52469e+5 / 12500 / (lambda ** 2 + -7.241481e+6 / 2500) ** 3 + 8107 / 1250 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 3 + 4913 / 3125 / (lambda ** 2 + -8.922169e+6 / 10000) ** 3) + 4.52469e+5 / 6250 / (lambda ** 2 + -7.241481e+6 / 2500) ** 3 + 8107 / 625 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 3 + 9826 / 3125 / (lambda ** 2 + -8.922169e+6 / 10000) ** 3) + lambda ** 5 * (-1.357407e+6 / 6250 / (lambda ** 2 + -7.241481e+6 / 2500) ** 4 + -24321 / 625 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 4 + -29478 / 3125 / (lambda ** 2 + -8.922169e+6 / 10000) ** 4)) / 2) / Math.sqrt(lambda ** 2 * (8107 / 10000 / (lambda ** 2 + -4.052169e+6 / 4e+8) + 4913 / 25000 / (lambda ** 2 + -8.922169e+6 / 10000) + 4.52469e+5 / 1e+5 / (lambda ** 2 + -7.241481e+6 / 2500)) + 1.33973e+5 / 1e+5) ** 2 + ((lambda ** 3 * (-8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 2 + -4913 / 12500 / (lambda ** 2 + -8.922169e+6 / 10000) ** 2 + -4.52469e+5 / 50000 / (lambda ** 2 + -7.241481e+6 / 2500) ** 2) + 2 * lambda * (8107 / 10000 / (lambda ** 2 + -4.052169e+6 / 4e+8) + 4913 / 25000 / (lambda ** 2 + -8.922169e+6 / 10000) + 4.52469e+5 / 1e+5 / (lambda ** 2 + -7.241481e+6 / 2500))) * (2 * ((4.52469e+5 / 25000 / (lambda ** 2 + -7.241481e+6 / 2500) ** 2 + 8107 / 2500 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 2 + 4913 / 6250 / (lambda ** 2 + -8.922169e+6 / 10000) ** 2 - 3 * (-4.52469e+5 / 50000 / (lambda ** 2 + -7.241481e+6 / 2500) ** 2 + -8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 2 + -4913 / 12500 / (lambda ** 2 + -8.922169e+6 / 10000) ** 2)) * lambda ** 2 + (-4.52469e+5 / 12500 / (lambda ** 2 + -7.241481e+6 / 2500) ** 3 + -8107 / 1250 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 3 + -4913 / 3125 / (lambda ** 2 + -8.922169e+6 / 10000) ** 3) * lambda ** 4 + -8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8)) + -4913 / 6250 / (lambda ** 2 + -8.922169e+6 / 10000) + -4.52469e+5 / 25000 / (lambda ** 2 + -7.241481e+6 / 2500)) - (lambda * (4.52469e+5 / 50000 / (lambda ** 2 + -7.241481e+6 / 2500) + 8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8) + 4913 / 12500 / (lambda ** 2 + -8.922169e+6 / 10000)) + lambda ** 3 * (-4.52469e+5 / 50000 / (lambda ** 2 + -7.241481e+6 / 2500) ** 2 + -8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 2 + -4913 / 12500 / (lambda ** 2 + -8.922169e+6 / 10000) ** 2)) * (lambda ** 4 * (8107 / 1250 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 3 + 4913 / 3125 / (lambda ** 2 + -8.922169e+6 / 10000) ** 3 + 4.52469e+5 / 12500 / (lambda ** 2 + -7.241481e+6 / 2500) ** 3) + 2 * (lambda ** 2 * (-8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 2 + -4913 / 12500 / (lambda ** 2 + -8.922169e+6 / 10000) ** 2 + -4.52469e+5 / 50000 / (lambda ** 2 + -7.241481e+6 / 2500) ** 2) + 8107 / 10000 / (lambda ** 2 + -4.052169e+6 / 4e+8) + 4913 / 25000 / (lambda ** 2 + -8.922169e+6 / 10000) + 4.52469e+5 / 1e+5 / (lambda ** 2 + -7.241481e+6 / 2500)) + 3 * lambda ** 2 * (-8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 2 + -4913 / 12500 / (lambda ** 2 + -8.922169e+6 / 10000) ** 2 + -4.52469e+5 / 50000 / (lambda ** 2 + -7.241481e+6 / 2500) ** 2))) / 4) / Math.sqrt(lambda ** 2 * (8107 / 10000 / (lambda ** 2 + -4.052169e+6 / 4e+8) + 4913 / 25000 / (lambda ** 2 + -8.922169e+6 / 10000) + 4.52469e+5 / 1e+5 / (lambda ** 2 + -7.241481e+6 / 2500)) + 1.33973e+5 / 1e+5) ** 3 + 3 * ((lambda ** 2 * (-4.52469e+5 / 25000 / (lambda ** 2 + -7.241481e+6 / 2500) ** 2 + 3 * (-4.52469e+5 / 50000 / (lambda ** 2 + -7.241481e+6 / 2500) ** 2 + -8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 2 + -4913 / 12500 / (lambda ** 2 + -8.922169e+6 / 10000) ** 2) + -8107 / 2500 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 2 + -4913 / 6250 / (lambda ** 2 + -8.922169e+6 / 10000) ** 2) + lambda ** 4 * (4.52469e+5 / 12500 / (lambda ** 2 + -7.241481e+6 / 2500) ** 3 + 8107 / 1250 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 3 + 4913 / 3125 / (lambda ** 2 + -8.922169e+6 / 10000) ** 3) + 4.52469e+5 / 50000 / (lambda ** 2 + -7.241481e+6 / 2500) + 8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8) + 4913 / 12500 / (lambda ** 2 + -8.922169e+6 / 10000)) / 2 + (lambda * (4.52469e+5 / 50000 / (lambda ** 2 + -7.241481e+6 / 2500) + 8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8) + 4913 / 12500 / (lambda ** 2 + -8.922169e+6 / 10000)) + lambda ** 3 * (-4.52469e+5 / 50000 / (lambda ** 2 + -7.241481e+6 / 2500) ** 2 + -8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 2 + -4913 / 12500 / (lambda ** 2 + -8.922169e+6 / 10000) ** 2)) * (lambda ** 3 * (-8107 / 5000 / (lambda ** 2 + -4.052169e+6 / 4e+8) ** 2 + -4913 / 12500 / (lambda ** 2 + -8.922169e+6 / 10000) ** 2 + -4.52469e+5 / 50000 / (lambda ** 2 + -7.241481e+6 / 2500) ** 2) + 2 * lambda * (8107 / 10000 / (lambda ** 2 + -4.052169e+6 / 4e+8) + 4913 / 25000 / (lambda ** 2 + -8.922169e+6 / 10000) + 4.52469e+5 / 1e+5 / (lambda ** 2 + -7.241481e+6 / 2500))) * -1 / 4 / Math.sqrt(lambda ** 2 * (8107 / 10000 / (lambda ** 2 + -4.052169e+6 / 4e+8) + 4913 / 25000 / (lambda ** 2 + -8.922169e+6 / 10000) + 4.52469e+5 / 1e+5 / (lambda ** 2 + -7.241481e+6 / 2500)) + 1.33973e+5 / 1e+5) ** 2) / Math.sqrt(lambda ** 2 * (8107 / 10000 / (lambda ** 2 + -4.052169e+6 / 4e+8) + 4913 / 25000 / (lambda ** 2 + -8.922169e+6 / 10000) + 4.52469e+5 / 1e+5 / (lambda ** 2 + -7.241481e+6 / 2500)) + 1.33973e+5 / 1e+5)) / ((2 * Math.PI)**2 * c**3)"},"sqrt(1+4.45813734*lambda**2/(lambda**2-0.200859853**2)+0.467216334*lambda**2/(lambda**2-0.391371166**2)+2.8956629*lambda**2/(lambda**2-47.1362108**2))":{"GDu":"(n - lambda * (lambda * (5.7913258 / (lambda ** 2 - 2221.8223685820367) + 8.91627468 / (lambda ** 2 - 0.04034468054718161) + 0.934432668 / (lambda ** 2 - 0.15317138957619955)) + lambda ** 3 * (-(8.91627468 / (lambda ** 2 - 0.04034468054718161) ** 2) + -(5.7913258 / (lambda ** 2 - 2221.8223685820367) ** 2) - 0.934432668 / (lambda ** 2 - 0.15317138957619955) ** 2)) / 2 / Math.sqrt(lambda ** 2 * (4.45813734 / (lambda ** 2 - 0.04034468054718161) + 0.467216334 / (lambda ** 2 - 0.15317138957619955) + 2.8956629 / (lambda ** 2 - 2221.8223685820367)) + 1)) / c","GDDu":"lambda**3 * ((lambda ** 2 * (3 * (-(8.91627468 / (lambda ** 2 - 0.04034468054718161) ** 2) + -(5.7913258 / (lambda ** 2 - 2221.8223685820367) ** 2) - 0.934432668 / (lambda ** 2 - 0.15317138957619955) ** 2) + -(17.83254936 / (lambda ** 2 - 0.04034468054718161) ** 2) + -(1.868865336 / (lambda ** 2 - 0.15317138957619955) ** 2) - 11.5826516 / (lambda ** 2 - 2221.8223685820367) ** 2) + lambda ** 4 * (35.66509872 / (lambda ** 2 - 0.04034468054718161) ** 3 + 23.1653032 / (lambda ** 2 - 2221.8223685820367) ** 3 + 3.737730672 / (lambda ** 2 - 0.15317138957619955) ** 3) + 8.91627468 / (lambda ** 2 - 0.04034468054718161) + 5.7913258 / (lambda ** 2 - 2221.8223685820367) + 0.934432668 / (lambda ** 2 - 0.15317138957619955)) / 2 + (lambda * (5.7913258 / (lambda ** 2 - 2221.8223685820367) + 8.91627468 / (lambda ** 2 - 0.04034468054718161) + 0.934432668 / (lambda ** 2 - 0.15317138957619955)) + lambda ** 3 * (-(8.91627468 / (lambda ** 2 - 0.04034468054718161) ** 2) + -(5.7913258 / (lambda ** 2 - 2221.8223685820367) ** 2) - 0.934432668 / (lambda ** 2 - 0.15317138957619955) ** 2)) * (lambda ** 3 * (-(8.91627468 / (lambda ** 2 - 0.04034468054718161) ** 2) + -(0.934432668 / (lambda ** 2 - 0.15317138957619955) ** 2) - 5.7913258 / (lambda ** 2 - 2221.8223685820367) ** 2) + 2 * lambda * (4.45813734 / (lambda ** 2 - 0.04034468054718161) + 0.467216334 / (lambda ** 2 - 0.15317138957619955) + 2.8956629 / (lambda ** 2 - 2221.8223685820367))) * -1 / 4 / Math.sqrt(lambda ** 2 * (4.45813734 / (lambda ** 2 - 0.04034468054718161) + 0.467216334 / (lambda ** 2 - 0.15317138957619955) + 2.8956629 / (lambda ** 2 - 2221.8223685820367)) + 1) ** 2) / Math.sqrt(lambda ** 2 * (4.45813734 / (lambda ** 2 - 0.04034468054718161) + 0.467216334 / (lambda ** 2 - 0.15317138957619955) + 2.8956629 / (lambda ** 2 - 2221.8223685820367)) + 1) / (2 * Math.PI * c**2)","TODu":"(-1) * lambda**4 * (lambda * (((lambda ** 3 * (-(0.934432668 / (lambda ** 2 - 0.15317138957619955) ** 2) + -(5.7913258 / (lambda ** 2 - 2221.8223685820367) ** 2) - 8.91627468 / (lambda ** 2 - 0.04034468054718161) ** 2) + 2 * lambda * (4.45813734 / (lambda ** 2 - 0.04034468054718161) + 0.467216334 / (lambda ** 2 - 0.15317138957619955) + 2.8956629 / (lambda ** 2 - 2221.8223685820367))) ** 2 * (lambda * (5.7913258 / (lambda ** 2 - 2221.8223685820367) + 8.91627468 / (lambda ** 2 - 0.04034468054718161) + 0.934432668 / (lambda ** 2 - 0.15317138957619955)) + lambda ** 3 * (-(5.7913258 / (lambda ** 2 - 2221.8223685820367) ** 2) + -(0.934432668 / (lambda ** 2 - 0.15317138957619955) ** 2) - 8.91627468 / (lambda ** 2 - 0.04034468054718161) ** 2)) * 3 / 8 + Math.sqrt(lambda ** 2 * (4.45813734 / (lambda ** 2 - 0.04034468054718161) + 0.467216334 / (lambda ** 2 - 0.15317138957619955) + 2.8956629 / (lambda ** 2 - 2221.8223685820367)) + 1) ** 4 * (lambda * (2 * (3 * (-(5.7913258 / (lambda ** 2 - 2221.8223685820367) ** 2) + -(0.934432668 / (lambda ** 2 - 0.15317138957619955) ** 2) - 8.91627468 / (lambda ** 2 - 0.04034468054718161) ** 2) + -(1.868865336 / (lambda ** 2 - 0.15317138957619955) ** 2) + -(11.5826516 / (lambda ** 2 - 2221.8223685820367) ** 2) - 17.83254936 / (lambda ** 2 - 0.04034468054718161) ** 2) + -(17.83254936 / (lambda ** 2 - 0.04034468054718161) ** 2) + -(11.5826516 / (lambda ** 2 - 2221.8223685820367) ** 2) - 1.868865336 / (lambda ** 2 - 0.15317138957619955) ** 2) + lambda ** 3 * (7 * (35.66509872 / (lambda ** 2 - 0.04034468054718161) ** 3 + 23.1653032 / (lambda ** 2 - 2221.8223685820367) ** 3 + 3.737730672 / (lambda ** 2 - 0.15317138957619955) ** 3) + 71.33019744 / (lambda ** 2 - 0.04034468054718161) ** 3 + 7.475461344 / (lambda ** 2 - 0.15317138957619955) ** 3 + 46.3306064 / (lambda ** 2 - 2221.8223685820367) ** 3) + lambda ** 5 * (-(213.99059232000002 / (lambda ** 2 - 0.04034468054718161) ** 4) + -(138.9918192 / (lambda ** 2 - 2221.8223685820367) ** 4) - 22.426384032 / (lambda ** 2 - 0.15317138957619955) ** 4)) / 2) / Math.sqrt(lambda ** 2 * (4.45813734 / (lambda ** 2 - 0.04034468054718161) + 0.467216334 / (lambda ** 2 - 0.15317138957619955) + 2.8956629 / (lambda ** 2 - 2221.8223685820367)) + 1) ** 2 + ((lambda ** 3 * (-(0.934432668 / (lambda ** 2 - 0.15317138957619955) ** 2) + -(5.7913258 / (lambda ** 2 - 2221.8223685820367) ** 2) - 8.91627468 / (lambda ** 2 - 0.04034468054718161) ** 2) + 2 * lambda * (4.45813734 / (lambda ** 2 - 0.04034468054718161) + 0.467216334 / (lambda ** 2 - 0.15317138957619955) + 2.8956629 / (lambda ** 2 - 2221.8223685820367))) * (2 * ((-(3.737730672 / (lambda ** 2 - 0.15317138957619955) ** 3) + -(35.66509872 / (lambda ** 2 - 0.04034468054718161) ** 3) - 23.1653032 / (lambda ** 2 - 2221.8223685820367) ** 3) * lambda ** 4 + (11.5826516 / (lambda ** 2 - 2221.8223685820367) ** 2 + 17.83254936 / (lambda ** 2 - 0.04034468054718161) ** 2 + 1.868865336 / (lambda ** 2 - 0.15317138957619955) ** 2 - 3 * (-(5.7913258 / (lambda ** 2 - 2221.8223685820367) ** 2) + -(0.934432668 / (lambda ** 2 - 0.15317138957619955) ** 2) - 8.91627468 / (lambda ** 2 - 0.04034468054718161) ** 2)) * lambda ** 2 - 5.7913258 / (lambda ** 2 - 2221.8223685820367)) + -(17.83254936 / (lambda ** 2 - 0.04034468054718161)) - 1.868865336 / (lambda ** 2 - 0.15317138957619955)) - (lambda * (5.7913258 / (lambda ** 2 - 2221.8223685820367) + 8.91627468 / (lambda ** 2 - 0.04034468054718161) + 0.934432668 / (lambda ** 2 - 0.15317138957619955)) + lambda ** 3 * (-(5.7913258 / (lambda ** 2 - 2221.8223685820367) ** 2) + -(0.934432668 / (lambda ** 2 - 0.15317138957619955) ** 2) - 8.91627468 / (lambda ** 2 - 0.04034468054718161) ** 2)) * (lambda ** 4 * (35.66509872 / (lambda ** 2 - 0.04034468054718161) ** 3 + 3.737730672 / (lambda ** 2 - 0.15317138957619955) ** 3 + 23.1653032 / (lambda ** 2 - 2221.8223685820367) ** 3) + 2 * (lambda ** 2 * (-(8.91627468 / (lambda ** 2 - 0.04034468054718161) ** 2) + -(0.934432668 / (lambda ** 2 - 0.15317138957619955) ** 2) - 5.7913258 / (lambda ** 2 - 2221.8223685820367) ** 2) + 4.45813734 / (lambda ** 2 - 0.04034468054718161) + 0.467216334 / (lambda ** 2 - 0.15317138957619955) + 2.8956629 / (lambda ** 2 - 2221.8223685820367)) + 3 * lambda ** 2 * (-(0.934432668 / (lambda ** 2 - 0.15317138957619955) ** 2) + -(5.7913258 / (lambda ** 2 - 2221.8223685820367) ** 2) - 8.91627468 / (lambda ** 2 - 0.04034468054718161) ** 2))) / 4) / Math.sqrt(lambda ** 2 * (4.45813734 / (lambda ** 2 - 0.04034468054718161) + 0.467216334 / (lambda ** 2 - 0.15317138957619955) + 2.8956629 / (lambda ** 2 - 2221.8223685820367)) + 1) ** 3 + 3 * ((lambda ** 2 * (3 * (-(8.91627468 / (lambda ** 2 - 0.04034468054718161) ** 2) + -(5.7913258 / (lambda ** 2 - 2221.8223685820367) ** 2) - 0.934432668 / (lambda ** 2 - 0.15317138957619955) ** 2) + -(17.83254936 / (lambda ** 2 - 0.04034468054718161) ** 2) + -(1.868865336 / (lambda ** 2 - 0.15317138957619955) ** 2) - 11.5826516 / (lambda ** 2 - 2221.8223685820367) ** 2) + lambda ** 4 * (35.66509872 / (lambda ** 2 - 0.04034468054718161) ** 3 + 23.1653032 / (lambda ** 2 - 2221.8223685820367) ** 3 + 3.737730672 / (lambda ** 2 - 0.15317138957619955) ** 3) + 8.91627468 / (lambda ** 2 - 0.04034468054718161) + 5.7913258 / (lambda ** 2 - 2221.8223685820367) + 0.934432668 / (lambda ** 2 - 0.15317138957619955)) / 2 + (lambda * (5.7913258 / (lambda ** 2 - 2221.8223685820367) + 8.91627468 / (lambda ** 2 - 0.04034468054718161) + 0.934432668 / (lambda ** 2 - 0.15317138957619955)) + lambda ** 3 * (-(8.91627468 / (lambda ** 2 - 0.04034468054718161) ** 2) + -(5.7913258 / (lambda ** 2 - 2221.8223685820367) ** 2) - 0.934432668 / (lambda ** 2 - 0.15317138957619955) ** 2)) * (lambda ** 3 * (-(8.91627468 / (lambda ** 2 - 0.04034468054718161) ** 2) + -(0.934432668 / (lambda ** 2 - 0.15317138957619955) ** 2) - 5.7913258 / (lambda ** 2 - 2221.8223685820367) ** 2) + 2 * lambda * (4.45813734 / (lambda ** 2 - 0.04034468054718161) + 0.467216334 / (lambda ** 2 - 0.15317138957619955) + 2.8956629 / (lambda ** 2 - 2221.8223685820367))) * -1 / 4 / Math.sqrt(lambda ** 2 * (4.45813734 / (lambda ** 2 - 0.04034468054718161) + 0.467216334 / (lambda ** 2 - 0.15317138957619955) + 2.8956629 / (lambda ** 2 - 2221.8223685820367)) + 1) ** 2) / Math.sqrt(lambda ** 2 * (4.45813734 / (lambda ** 2 - 0.04034468054718161) + 0.467216334 / (lambda ** 2 - 0.15317138957619955) + 2.8956629 / (lambda ** 2 - 2221.8223685820367)) + 1)) / ((2 * Math.PI)**2 * c**3)"},"sqrt(1+1.62153902*lambda**2/(lambda**2-0.0122241457)+0.256287842*lambda**2/(lambda**2-0.0595736775)+1.64447552*lambda**2/(lambda**2-147.468793))":{"GDu":"(n - lambda * (lambda * (2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) + 3.24307804 / (lambda ** 2 - 0.0122241457) + 0.512575684 / (lambda ** 2 - 0.0595736775)) + lambda ** 3 * (-2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) ** 2 + -(0.512575684 / (lambda ** 2 - 0.0595736775) ** 2) - 3.24307804 / (lambda ** 2 - 0.0122241457) ** 2)) / 2 / Math.sqrt(lambda ** 2 * (1.62153902 / (lambda ** 2 - 0.0122241457) + 0.256287842 / (lambda ** 2 - 0.0595736775) + 1.64447552 / (lambda ** 2 - 147.468793)) + 1)) / c","GDDu":"lambda**3 * ((lambda ** 2 * (-2.569493e+6 / 3.90625e+5 / (lambda ** 2 - 147.468793) ** 2 + 3 * (-2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) ** 2 + -(3.24307804 / (lambda ** 2 - 0.0122241457) ** 2) - 0.512575684 / (lambda ** 2 - 0.0595736775) ** 2) + -(1.025151368 / (lambda ** 2 - 0.0595736775) ** 2) - 6.48615608 / (lambda ** 2 - 0.0122241457) ** 2) + lambda ** 4 * (5.138986e+6 / 3.90625e+5 / (lambda ** 2 - 147.468793) ** 3 + 2.050302736 / (lambda ** 2 - 0.0595736775) ** 3 + 12.97231216 / (lambda ** 2 - 0.0122241457) ** 3) + 2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) + 3.24307804 / (lambda ** 2 - 0.0122241457) + 0.512575684 / (lambda ** 2 - 0.0595736775)) / 2 + (lambda * (2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) + 3.24307804 / (lambda ** 2 - 0.0122241457) + 0.512575684 / (lambda ** 2 - 0.0595736775)) + lambda ** 3 * (-2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) ** 2 + -(3.24307804 / (lambda ** 2 - 0.0122241457) ** 2) - 0.512575684 / (lambda ** 2 - 0.0595736775) ** 2)) * (lambda ** 3 * (-2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) ** 2 + -(0.512575684 / (lambda ** 2 - 0.0595736775) ** 2) - 3.24307804 / (lambda ** 2 - 0.0122241457) ** 2) + 2 * lambda * (1.62153902 / (lambda ** 2 - 0.0122241457) + 0.256287842 / (lambda ** 2 - 0.0595736775) + 1.64447552 / (lambda ** 2 - 147.468793))) * -1 / 4 / Math.sqrt(lambda ** 2 * (1.62153902 / (lambda ** 2 - 0.0122241457) + 0.256287842 / (lambda ** 2 - 0.0595736775) + 1.64447552 / (lambda ** 2 - 147.468793)) + 1) ** 2) / Math.sqrt(lambda ** 2 * (1.62153902 / (lambda ** 2 - 0.0122241457) + 0.256287842 / (lambda ** 2 - 0.0595736775) + 1.64447552 / (lambda ** 2 - 147.468793)) + 1) / (2 * Math.PI * c**2)","TODu":"(-1) * lambda**4 * (lambda * (((lambda ** 2 * (-2.569493e+6 / 3.90625e+5 / (lambda ** 2 - 147.468793) ** 2 + 3 * (-2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) ** 2 + -(0.512575684 / (lambda ** 2 - 0.0595736775) ** 2) - 3.24307804 / (lambda ** 2 - 0.0122241457) ** 2) + -(1.025151368 / (lambda ** 2 - 0.0595736775) ** 2) - 6.48615608 / (lambda ** 2 - 0.0122241457) ** 2) + lambda ** 4 * (5.138986e+6 / 3.90625e+5 / (lambda ** 2 - 147.468793) ** 3 + 12.97231216 / (lambda ** 2 - 0.0122241457) ** 3 + 2.050302736 / (lambda ** 2 - 0.0595736775) ** 3) + 2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) + 3.24307804 / (lambda ** 2 - 0.0122241457) + 0.512575684 / (lambda ** 2 - 0.0595736775)) * (lambda ** 3 * (-2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) ** 2 + -(3.24307804 / (lambda ** 2 - 0.0122241457) ** 2) - 0.512575684 / (lambda ** 2 - 0.0595736775) ** 2) + 2 * lambda * (1.62153902 / (lambda ** 2 - 0.0122241457) + 0.256287842 / (lambda ** 2 - 0.0595736775) + 1.64447552 / (lambda ** 2 - 147.468793))) + (lambda * (2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) + 3.24307804 / (lambda ** 2 - 0.0122241457) + 0.512575684 / (lambda ** 2 - 0.0595736775)) + lambda ** 3 * (-2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) ** 2 + -(0.512575684 / (lambda ** 2 - 0.0595736775) ** 2) - 3.24307804 / (lambda ** 2 - 0.0122241457) ** 2)) * (lambda ** 4 * (5.138986e+6 / 3.90625e+5 / (lambda ** 2 - 147.468793) ** 3 + 2.050302736 / (lambda ** 2 - 0.0595736775) ** 3 + 12.97231216 / (lambda ** 2 - 0.0122241457) ** 3) + 2 * (lambda ** 2 * (-2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) ** 2 + -(3.24307804 / (lambda ** 2 - 0.0122241457) ** 2) - 0.512575684 / (lambda ** 2 - 0.0595736775) ** 2) + 1.62153902 / (lambda ** 2 - 0.0122241457) + 0.256287842 / (lambda ** 2 - 0.0595736775) + 1.64447552 / (lambda ** 2 - 147.468793)) + 3 * lambda ** 2 * (-2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) ** 2 + -(3.24307804 / (lambda ** 2 - 0.0122241457) ** 2) - 0.512575684 / (lambda ** 2 - 0.0595736775) ** 2))) * -1 / 4 + Math.sqrt(lambda ** 2 * (1.62153902 / (lambda ** 2 - 0.0122241457) + 0.256287842 / (lambda ** 2 - 0.0595736775) + 1.64447552 / (lambda ** 2 - 147.468793)) + 1) ** 2 * ((lambda * (2 * (-2.569493e+6 / 3.90625e+5 / (lambda ** 2 - 147.468793) ** 2 + 3 * (-2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) ** 2 + -(0.512575684 / (lambda ** 2 - 0.0595736775) ** 2) - 3.24307804 / (lambda ** 2 - 0.0122241457) ** 2) + -(6.48615608 / (lambda ** 2 - 0.0122241457) ** 2) - 1.025151368 / (lambda ** 2 - 0.0595736775) ** 2) + -2.569493e+6 / 3.90625e+5 / (lambda ** 2 - 147.468793) ** 2 + -(6.48615608 / (lambda ** 2 - 0.0122241457) ** 2) - 1.025151368 / (lambda ** 2 - 0.0595736775) ** 2) + lambda ** 3 * (1.0277972e+7 / 3.90625e+5 / (lambda ** 2 - 147.468793) ** 3 + 4.100605472 / (lambda ** 2 - 0.0595736775) ** 3 + 25.94462432 / (lambda ** 2 - 0.0122241457) ** 3 + 3 * (5.138986e+6 / 3.90625e+5 / (lambda ** 2 - 147.468793) ** 3 + 12.97231216 / (lambda ** 2 - 0.0122241457) ** 3 + 2.050302736 / (lambda ** 2 - 0.0595736775) ** 3) + 4 * (5.138986e+6 / 3.90625e+5 / (lambda ** 2 - 147.468793) ** 3 + 2.050302736 / (lambda ** 2 - 0.0595736775) ** 3 + 12.97231216 / (lambda ** 2 - 0.0122241457) ** 3)) + lambda ** 5 * (-3.0833916e+7 / 3.90625e+5 / (lambda ** 2 - 147.468793) ** 4 + -(12.301816416 / (lambda ** 2 - 0.0595736775) ** 4) - 77.83387296 / (lambda ** 2 - 0.0122241457) ** 4)) / 2 + ((Math.sqrt(lambda ** 2 * (1.62153902 / (lambda ** 2 - 0.0122241457) + 0.256287842 / (lambda ** 2 - 0.0595736775) + 1.64447552 / (lambda ** 2 - 147.468793)) + 1) ** (-2)) ** 2 * (lambda * (2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) + 3.24307804 / (lambda ** 2 - 0.0122241457) + 0.512575684 / (lambda ** 2 - 0.0595736775)) + lambda ** 3 * (-2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) ** 2 + -(0.512575684 / (lambda ** 2 - 0.0595736775) ** 2) - 3.24307804 / (lambda ** 2 - 0.0122241457) ** 2)) * (lambda ** 3 * (-2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) ** 2 + -(3.24307804 / (lambda ** 2 - 0.0122241457) ** 2) - 0.512575684 / (lambda ** 2 - 0.0595736775) ** 2) + 2 * lambda * (1.62153902 / (lambda ** 2 - 0.0122241457) + 0.256287842 / (lambda ** 2 - 0.0595736775) + 1.64447552 / (lambda ** 2 - 147.468793))) * 3 / 8 + (-2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) + -(3.24307804 / (lambda ** 2 - 0.0122241457)) + -(0.512575684 / (lambda ** 2 - 0.0595736775)) - (lambda ** 2 * (-2.569493e+6 / 3.90625e+5 / (lambda ** 2 - 147.468793) ** 2 + 3 * (-2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) ** 2 + -(0.512575684 / (lambda ** 2 - 0.0595736775) ** 2) - 3.24307804 / (lambda ** 2 - 0.0122241457) ** 2) + -(6.48615608 / (lambda ** 2 - 0.0122241457) ** 2) - 1.025151368 / (lambda ** 2 - 0.0595736775) ** 2) + lambda ** 4 * (5.138986e+6 / 3.90625e+5 / (lambda ** 2 - 147.468793) ** 3 + 2.050302736 / (lambda ** 2 - 0.0595736775) ** 3 + 12.97231216 / (lambda ** 2 - 0.0122241457) ** 3))) / 4 / Math.sqrt(lambda ** 2 * (1.62153902 / (lambda ** 2 - 0.0122241457) + 0.256287842 / (lambda ** 2 - 0.0595736775) + 1.64447552 / (lambda ** 2 - 147.468793)) + 1) ** 2) * (lambda ** 3 * (-2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) ** 2 + -(0.512575684 / (lambda ** 2 - 0.0595736775) ** 2) - 3.24307804 / (lambda ** 2 - 0.0122241457) ** 2) + 2 * lambda * (1.62153902 / (lambda ** 2 - 0.0122241457) + 0.256287842 / (lambda ** 2 - 0.0595736775) + 1.64447552 / (lambda ** 2 - 147.468793))))) / Math.sqrt(lambda ** 2 * (1.62153902 / (lambda ** 2 - 0.0122241457) + 0.256287842 / (lambda ** 2 - 0.0595736775) + 1.64447552 / (lambda ** 2 - 147.468793)) + 1) ** 3 + 3 * ((lambda ** 2 * (-2.569493e+6 / 3.90625e+5 / (lambda ** 2 - 147.468793) ** 2 + 3 * (-2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) ** 2 + -(3.24307804 / (lambda ** 2 - 0.0122241457) ** 2) - 0.512575684 / (lambda ** 2 - 0.0595736775) ** 2) + -(1.025151368 / (lambda ** 2 - 0.0595736775) ** 2) - 6.48615608 / (lambda ** 2 - 0.0122241457) ** 2) + lambda ** 4 * (5.138986e+6 / 3.90625e+5 / (lambda ** 2 - 147.468793) ** 3 + 2.050302736 / (lambda ** 2 - 0.0595736775) ** 3 + 12.97231216 / (lambda ** 2 - 0.0122241457) ** 3) + 2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) + 3.24307804 / (lambda ** 2 - 0.0122241457) + 0.512575684 / (lambda ** 2 - 0.0595736775)) / 2 + (lambda * (2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) + 3.24307804 / (lambda ** 2 - 0.0122241457) + 0.512575684 / (lambda ** 2 - 0.0595736775)) + lambda ** 3 * (-2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) ** 2 + -(3.24307804 / (lambda ** 2 - 0.0122241457) ** 2) - 0.512575684 / (lambda ** 2 - 0.0595736775) ** 2)) * (lambda ** 3 * (-2.569493e+6 / 7.8125e+5 / (lambda ** 2 - 147.468793) ** 2 + -(0.512575684 / (lambda ** 2 - 0.0595736775) ** 2) - 3.24307804 / (lambda ** 2 - 0.0122241457) ** 2) + 2 * lambda * (1.62153902 / (lambda ** 2 - 0.0122241457) + 0.256287842 / (lambda ** 2 - 0.0595736775) + 1.64447552 / (lambda ** 2 - 147.468793))) * -1 / 4 / Math.sqrt(lambda ** 2 * (1.62153902 / (lambda ** 2 - 0.0122241457) + 0.256287842 / (lambda ** 2 - 0.0595736775) + 1.64447552 / (lambda ** 2 - 147.468793)) + 1) ** 2) / Math.sqrt(lambda ** 2 * (1.62153902 / (lambda ** 2 - 0.0122241457) + 0.256287842 / (lambda ** 2 - 0.0595736775) + 1.64447552 / (lambda ** 2 - 147.468793)) + 1)) / ((2 * Math.PI)**2 * c**3)"},"sqrt(1+1.87543831*lambda**2/(lambda**2-0.0141749518)+0.37375749*lambda**2/(lambda**2-0.0640509927)+2.30001797*lambda**2/(lambda**2-177.389795))":{"GDu":"(n - lambda * (lambda * (4.60003594 / (lambda ** 2 - 177.389795) + 3.75087662 / (lambda ** 2 - 0.0141749518) + 0.74751498 / (lambda ** 2 - 0.0640509927)) + lambda ** 3 * (-(3.75087662 / (lambda ** 2 - 0.0141749518) ** 2) + -(4.60003594 / (lambda ** 2 - 177.389795) ** 2) - 0.74751498 / (lambda ** 2 - 0.0640509927) ** 2)) / 2 / Math.sqrt(lambda ** 2 * (1.87543831 / (lambda ** 2 - 0.0141749518) + 0.37375749 / (lambda ** 2 - 0.0640509927) + 2.30001797 / (lambda ** 2 - 177.389795)) + 1)) / c","GDDu":"lambda**3 * ((lambda ** 2 * (3 * (-(3.75087662 / (lambda ** 2 - 0.0141749518) ** 2) + -(4.60003594 / (lambda ** 2 - 177.389795) ** 2) - 0.74751498 / (lambda ** 2 - 0.0640509927) ** 2) + -(7.50175324 / (lambda ** 2 - 0.0141749518) ** 2) + -(1.49502996 / (lambda ** 2 - 0.0640509927) ** 2) - 9.20007188 / (lambda ** 2 - 177.389795) ** 2) + lambda ** 4 * (15.00350648 / (lambda ** 2 - 0.0141749518) ** 3 + 18.40014376 / (lambda ** 2 - 177.389795) ** 3 + 2.99005992 / (lambda ** 2 - 0.0640509927) ** 3) + 3.75087662 / (lambda ** 2 - 0.0141749518) + 4.60003594 / (lambda ** 2 - 177.389795) + 0.74751498 / (lambda ** 2 - 0.0640509927)) / 2 + (lambda * (4.60003594 / (lambda ** 2 - 177.389795) + 3.75087662 / (lambda ** 2 - 0.0141749518) + 0.74751498 / (lambda ** 2 - 0.0640509927)) + lambda ** 3 * (-(3.75087662 / (lambda ** 2 - 0.0141749518) ** 2) + -(4.60003594 / (lambda ** 2 - 177.389795) ** 2) - 0.74751498 / (lambda ** 2 - 0.0640509927) ** 2)) * (lambda ** 3 * (-(3.75087662 / (lambda ** 2 - 0.0141749518) ** 2) + -(0.74751498 / (lambda ** 2 - 0.0640509927) ** 2) - 4.60003594 / (lambda ** 2 - 177.389795) ** 2) + 2 * lambda * (1.87543831 / (lambda ** 2 - 0.0141749518) + 0.37375749 / (lambda ** 2 - 0.0640509927) + 2.30001797 / (lambda ** 2 - 177.389795))) * -1 / 4 / Math.sqrt(lambda ** 2 * (1.87543831 / (lambda ** 2 - 0.0141749518) + 0.37375749 / (lambda ** 2 - 0.0640509927) + 2.30001797 / (lambda ** 2 - 177.389795)) + 1) ** 2) / Math.sqrt(lambda ** 2 * (1.87543831 / (lambda ** 2 - 0.0141749518) + 0.37375749 / (lambda ** 2 - 0.0640509927) + 2.30001797 / (lambda ** 2 - 177.389795)) + 1) / (2 * Math.PI * c**2)","TODu":"(-1) * lambda**4 * (lambda * (((lambda ** 3 * (-(0.74751498 / (lambda ** 2 - 0.0640509927) ** 2) + -(4.60003594 / (lambda ** 2 - 177.389795) ** 2) - 3.75087662 / (lambda ** 2 - 0.0141749518) ** 2) + 2 * lambda * (1.87543831 / (lambda ** 2 - 0.0141749518) + 0.37375749 / (lambda ** 2 - 0.0640509927) + 2.30001797 / (lambda ** 2 - 177.389795))) ** 2 * (lambda * (4.60003594 / (lambda ** 2 - 177.389795) + 3.75087662 / (lambda ** 2 - 0.0141749518) + 0.74751498 / (lambda ** 2 - 0.0640509927)) + lambda ** 3 * (-(4.60003594 / (lambda ** 2 - 177.389795) ** 2) + -(0.74751498 / (lambda ** 2 - 0.0640509927) ** 2) - 3.75087662 / (lambda ** 2 - 0.0141749518) ** 2)) * 3 / 8 + Math.sqrt(lambda ** 2 * (1.87543831 / (lambda ** 2 - 0.0141749518) + 0.37375749 / (lambda ** 2 - 0.0640509927) + 2.30001797 / (lambda ** 2 - 177.389795)) + 1) ** 4 * (lambda * (2 * (3 * (-(4.60003594 / (lambda ** 2 - 177.389795) ** 2) + -(0.74751498 / (lambda ** 2 - 0.0640509927) ** 2) - 3.75087662 / (lambda ** 2 - 0.0141749518) ** 2) + -(1.49502996 / (lambda ** 2 - 0.0640509927) ** 2) + -(9.20007188 / (lambda ** 2 - 177.389795) ** 2) - 7.50175324 / (lambda ** 2 - 0.0141749518) ** 2) + -(7.50175324 / (lambda ** 2 - 0.0141749518) ** 2) + -(9.20007188 / (lambda ** 2 - 177.389795) ** 2) - 1.49502996 / (lambda ** 2 - 0.0640509927) ** 2) + lambda ** 3 * (7 * (15.00350648 / (lambda ** 2 - 0.0141749518) ** 3 + 18.40014376 / (lambda ** 2 - 177.389795) ** 3 + 2.99005992 / (lambda ** 2 - 0.0640509927) ** 3) + 30.00701296 / (lambda ** 2 - 0.0141749518) ** 3 + 5.98011984 / (lambda ** 2 - 0.0640509927) ** 3 + 36.80028752 / (lambda ** 2 - 177.389795) ** 3) + lambda ** 5 * (-(90.02103888 / (lambda ** 2 - 0.0141749518) ** 4) + -(110.40086256 / (lambda ** 2 - 177.389795) ** 4) - 17.94035952 / (lambda ** 2 - 0.0640509927) ** 4)) / 2) / Math.sqrt(lambda ** 2 * (1.87543831 / (lambda ** 2 - 0.0141749518) + 0.37375749 / (lambda ** 2 - 0.0640509927) + 2.30001797 / (lambda ** 2 - 177.389795)) + 1) ** 2 + ((lambda ** 3 * (-(0.74751498 / (lambda ** 2 - 0.0640509927) ** 2) + -(4.60003594 / (lambda ** 2 - 177.389795) ** 2) - 3.75087662 / (lambda ** 2 - 0.0141749518) ** 2) + 2 * lambda * (1.87543831 / (lambda ** 2 - 0.0141749518) + 0.37375749 / (lambda ** 2 - 0.0640509927) + 2.30001797 / (lambda ** 2 - 177.389795))) * (2 * ((-(2.99005992 / (lambda ** 2 - 0.0640509927) ** 3) + -(15.00350648 / (lambda ** 2 - 0.0141749518) ** 3) - 18.40014376 / (lambda ** 2 - 177.389795) ** 3) * lambda ** 4 + (9.20007188 / (lambda ** 2 - 177.389795) ** 2 + 7.50175324 / (lambda ** 2 - 0.0141749518) ** 2 + 1.49502996 / (lambda ** 2 - 0.0640509927) ** 2 - 3 * (-(4.60003594 / (lambda ** 2 - 177.389795) ** 2) + -(0.74751498 / (lambda ** 2 - 0.0640509927) ** 2) - 3.75087662 / (lambda ** 2 - 0.0141749518) ** 2)) * lambda ** 2 - 4.60003594 / (lambda ** 2 - 177.389795)) + -(7.50175324 / (lambda ** 2 - 0.0141749518)) - 1.49502996 / (lambda ** 2 - 0.0640509927)) - (lambda * (4.60003594 / (lambda ** 2 - 177.389795) + 3.75087662 / (lambda ** 2 - 0.0141749518) + 0.74751498 / (lambda ** 2 - 0.0640509927)) + lambda ** 3 * (-(4.60003594 / (lambda ** 2 - 177.389795) ** 2) + -(0.74751498 / (lambda ** 2 - 0.0640509927) ** 2) - 3.75087662 / (lambda ** 2 - 0.0141749518) ** 2)) * (lambda ** 4 * (15.00350648 / (lambda ** 2 - 0.0141749518) ** 3 + 2.99005992 / (lambda ** 2 - 0.0640509927) ** 3 + 18.40014376 / (lambda ** 2 - 177.389795) ** 3) + 2 * (lambda ** 2 * (-(3.75087662 / (lambda ** 2 - 0.0141749518) ** 2) + -(0.74751498 / (lambda ** 2 - 0.0640509927) ** 2) - 4.60003594 / (lambda ** 2 - 177.389795) ** 2) + 1.87543831 / (lambda ** 2 - 0.0141749518) + 0.37375749 / (lambda ** 2 - 0.0640509927) + 2.30001797 / (lambda ** 2 - 177.389795)) + 3 * lambda ** 2 * (-(0.74751498 / (lambda ** 2 - 0.0640509927) ** 2) + -(4.60003594 / (lambda ** 2 - 177.389795) ** 2) - 3.75087662 / (lambda ** 2 - 0.0141749518) ** 2))) / 4) / Math.sqrt(lambda ** 2 * (1.87543831 / (lambda ** 2 - 0.0141749518) + 0.37375749 / (lambda ** 2 - 0.0640509927) + 2.30001797 / (lambda ** 2 - 177.389795)) + 1) ** 3 + 3 * ((lambda ** 2 * (3 * (-(3.75087662 / (lambda ** 2 - 0.0141749518) ** 2) + -(4.60003594 / (lambda ** 2 - 177.389795) ** 2) - 0.74751498 / (lambda ** 2 - 0.0640509927) ** 2) + -(7.50175324 / (lambda ** 2 - 0.0141749518) ** 2) + -(1.49502996 / (lambda ** 2 - 0.0640509927) ** 2) - 9.20007188 / (lambda ** 2 - 177.389795) ** 2) + lambda ** 4 * (15.00350648 / (lambda ** 2 - 0.0141749518) ** 3 + 18.40014376 / (lambda ** 2 - 177.389795) ** 3 + 2.99005992 / (lambda ** 2 - 0.0640509927) ** 3) + 3.75087662 / (lambda ** 2 - 0.0141749518) + 4.60003594 / (lambda ** 2 - 177.389795) + 0.74751498 / (lambda ** 2 - 0.0640509927)) / 2 + (lambda * (4.60003594 / (lambda ** 2 - 177.389795) + 3.75087662 / (lambda ** 2 - 0.0141749518) + 0.74751498 / (lambda ** 2 - 0.0640509927)) + lambda ** 3 * (-(3.75087662 / (lambda ** 2 - 0.0141749518) ** 2) + -(4.60003594 / (lambda ** 2 - 177.389795) ** 2) - 0.74751498 / (lambda ** 2 - 0.0640509927) ** 2)) * (lambda ** 3 * (-(3.75087662 / (lambda ** 2 - 0.0141749518) ** 2) + -(0.74751498 / (lambda ** 2 - 0.0640509927) ** 2) - 4.60003594 / (lambda ** 2 - 177.389795) ** 2) + 2 * lambda * (1.87543831 / (lambda ** 2 - 0.0141749518) + 0.37375749 / (lambda ** 2 - 0.0640509927) + 2.30001797 / (lambda ** 2 - 177.389795))) * -1 / 4 / Math.sqrt(lambda ** 2 * (1.87543831 / (lambda ** 2 - 0.0141749518) + 0.37375749 / (lambda ** 2 - 0.0640509927) + 2.30001797 / (lambda ** 2 - 177.389795)) + 1) ** 2) / Math.sqrt(lambda ** 2 * (1.87543831 / (lambda ** 2 - 0.0141749518) + 0.37375749 / (lambda ** 2 - 0.0640509927) + 2.30001797 / (lambda ** 2 - 177.389795)) + 1)) / ((2 * Math.PI)**2 * c**3)"},"sqrt(1+2.282*lambda**2/(lambda**2-0.01185)+3.27644*lambda**2/(lambda**2-282.734))":{"GDu":"(n - lambda * (lambda ** 3 * (-1141 / 250 / (lambda ** 2 + -237 / 20000) ** 2 + -81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) ** 2) + lambda * (1141 / 250 / (lambda ** 2 + -237 / 20000) + 81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500))) / 2 / Math.sqrt(lambda ** 2 * (1141 / 500 / (lambda ** 2 + -237 / 20000) + 81911 / 25000 / (lambda ** 2 + -1.41367e+5 / 500)) + 1)) / c","GDDu":"lambda**3 * ((lambda ** 3 * (-1141 / 250 / (lambda ** 2 + -237 / 20000) ** 2 + -81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) ** 2) + lambda * (1141 / 250 / (lambda ** 2 + -237 / 20000) + 81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500))) * (lambda ** 3 * (-1141 / 250 / (lambda ** 2 + -237 / 20000) ** 2 + -81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) ** 2) + 2 * lambda * (1141 / 500 / (lambda ** 2 + -237 / 20000) + 81911 / 25000 / (lambda ** 2 + -1.41367e+5 / 500))) * -1 / 4 + Math.sqrt(lambda ** 2 * (1141 / 500 / (lambda ** 2 + -237 / 20000) + 81911 / 25000 / (lambda ** 2 + -1.41367e+5 / 500)) + 1) ** 2 * (lambda ** 2 * (-81911 / 6250 / (lambda ** 2 + -1.41367e+5 / 500) ** 2 + 3 * (-1141 / 250 / (lambda ** 2 + -237 / 20000) ** 2 + -81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) ** 2) + -1141 / 125 / (lambda ** 2 + -237 / 20000) ** 2) + 81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) + lambda ** 4 * (2282 / 125 / (lambda ** 2 + -237 / 20000) ** 3 + 81911 / 3125 / (lambda ** 2 + -1.41367e+5 / 500) ** 3) + 1141 / 250 / (lambda ** 2 + -237 / 20000)) / 2) / Math.sqrt(lambda ** 2 * (1141 / 500 / (lambda ** 2 + -237 / 20000) + 81911 / 25000 / (lambda ** 2 + -1.41367e+5 / 500)) + 1) ** 3 / (2 * Math.PI * c**2)","TODu":"(-1) * lambda**4 * (lambda * ((lambda ** 3 * (7 * (2282 / 125 / (lambda ** 2 + -237 / 20000) ** 3 + 81911 / 3125 / (lambda ** 2 + -1.41367e+5 / 500) ** 3) + 4564 / 125 / (lambda ** 2 + -237 / 20000) ** 3 + 1.63822e+5 / 3125 / (lambda ** 2 + -1.41367e+5 / 500) ** 3) + lambda * (-1141 / 125 / (lambda ** 2 + -237 / 20000) ** 2 + 2 * (-81911 / 6250 / (lambda ** 2 + -1.41367e+5 / 500) ** 2 + 3 * (-1141 / 250 / (lambda ** 2 + -237 / 20000) ** 2 + -81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) ** 2) + -1141 / 125 / (lambda ** 2 + -237 / 20000) ** 2) + -81911 / 6250 / (lambda ** 2 + -1.41367e+5 / 500) ** 2) + lambda ** 5 * (-4.91466e+5 / 3125 / (lambda ** 2 + -1.41367e+5 / 500) ** 4 + -13692 / 125 / (lambda ** 2 + -237 / 20000) ** 4)) / 2 + 3 * (((1141 / 250 / (lambda ** 2 + -237 / 20000) ** 2 + 81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) ** 2) * lambda ** 3 - 2 * lambda * (1141 / 500 / (lambda ** 2 + -237 / 20000) + 81911 / 25000 / (lambda ** 2 + -1.41367e+5 / 500))) * (lambda ** 2 * (-81911 / 6250 / (lambda ** 2 + -1.41367e+5 / 500) ** 2 + 3 * (-1141 / 250 / (lambda ** 2 + -237 / 20000) ** 2 + -81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) ** 2) + -1141 / 125 / (lambda ** 2 + -237 / 20000) ** 2) + 81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) + lambda ** 4 * (2282 / 125 / (lambda ** 2 + -237 / 20000) ** 3 + 81911 / 3125 / (lambda ** 2 + -1.41367e+5 / 500) ** 3) + 1141 / 250 / (lambda ** 2 + -237 / 20000)) / 4 + (lambda ** 3 * (-1141 / 250 / (lambda ** 2 + -237 / 20000) ** 2 + -81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) ** 2) + 2 * lambda * (1141 / 500 / (lambda ** 2 + -237 / 20000) + 81911 / 25000 / (lambda ** 2 + -1.41367e+5 / 500))) ** 2 * (lambda ** 3 * (-1141 / 250 / (lambda ** 2 + -237 / 20000) ** 2 + -81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) ** 2) + lambda * (1141 / 250 / (lambda ** 2 + -237 / 20000) + 81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500))) / 8 / Math.sqrt(lambda ** 2 * (1141 / 500 / (lambda ** 2 + -237 / 20000) + 81911 / 25000 / (lambda ** 2 + -1.41367e+5 / 500)) + 1) ** 2) / Math.sqrt(lambda ** 2 * (1141 / 500 / (lambda ** 2 + -237 / 20000) + 81911 / 25000 / (lambda ** 2 + -1.41367e+5 / 500)) + 1) ** 2 + ((lambda ** 3 * (-1141 / 250 / (lambda ** 2 + -237 / 20000) ** 2 + -81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) ** 2) + 2 * lambda * (1141 / 500 / (lambda ** 2 + -237 / 20000) + 81911 / 25000 / (lambda ** 2 + -1.41367e+5 / 500))) * (lambda ** 2 * (-81911 / 6250 / (lambda ** 2 + -1.41367e+5 / 500) ** 2 + 3 * (-1141 / 250 / (lambda ** 2 + -237 / 20000) ** 2 + -81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) ** 2) + -1141 / 125 / (lambda ** 2 + -237 / 20000) ** 2) + 81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) + lambda ** 4 * (2282 / 125 / (lambda ** 2 + -237 / 20000) ** 3 + 81911 / 3125 / (lambda ** 2 + -1.41367e+5 / 500) ** 3) + 1141 / 250 / (lambda ** 2 + -237 / 20000)) / 2 + ((lambda ** 2 * (-81911 / 6250 / (lambda ** 2 + -1.41367e+5 / 500) ** 2 + 3 * (-1141 / 250 / (lambda ** 2 + -237 / 20000) ** 2 + -81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) ** 2) + -1141 / 125 / (lambda ** 2 + -237 / 20000) ** 2) + 81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) + lambda ** 4 * (2282 / 125 / (lambda ** 2 + -237 / 20000) ** 3 + 81911 / 3125 / (lambda ** 2 + -1.41367e+5 / 500) ** 3) + 1141 / 250 / (lambda ** 2 + -237 / 20000)) * (lambda ** 3 * (-1141 / 250 / (lambda ** 2 + -237 / 20000) ** 2 + -81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) ** 2) + 2 * lambda * (1141 / 500 / (lambda ** 2 + -237 / 20000) + 81911 / 25000 / (lambda ** 2 + -1.41367e+5 / 500))) + (lambda ** 3 * (-1141 / 250 / (lambda ** 2 + -237 / 20000) ** 2 + -81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) ** 2) + lambda * (1141 / 250 / (lambda ** 2 + -237 / 20000) + 81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500))) * (5 * lambda ** 2 * (-1141 / 250 / (lambda ** 2 + -237 / 20000) ** 2 + -81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) ** 2) + lambda ** 4 * (2282 / 125 / (lambda ** 2 + -237 / 20000) ** 3 + 81911 / 3125 / (lambda ** 2 + -1.41367e+5 / 500) ** 3) + 2 * (1141 / 500 / (lambda ** 2 + -237 / 20000) + 81911 / 25000 / (lambda ** 2 + -1.41367e+5 / 500)))) * -1 / 4) / Math.sqrt(lambda ** 2 * (1141 / 500 / (lambda ** 2 + -237 / 20000) + 81911 / 25000 / (lambda ** 2 + -1.41367e+5 / 500)) + 1) ** 2) / Math.sqrt(lambda ** 2 * (1141 / 500 / (lambda ** 2 + -237 / 20000) + 81911 / 25000 / (lambda ** 2 + -1.41367e+5 / 500)) + 1) + 3 * ((lambda ** 3 * (-1141 / 250 / (lambda ** 2 + -237 / 20000) ** 2 + -81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) ** 2) + lambda * (1141 / 250 / (lambda ** 2 + -237 / 20000) + 81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500))) * (lambda ** 3 * (-1141 / 250 / (lambda ** 2 + -237 / 20000) ** 2 + -81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) ** 2) + 2 * lambda * (1141 / 500 / (lambda ** 2 + -237 / 20000) + 81911 / 25000 / (lambda ** 2 + -1.41367e+5 / 500))) * -1 / 4 + Math.sqrt(lambda ** 2 * (1141 / 500 / (lambda ** 2 + -237 / 20000) + 81911 / 25000 / (lambda ** 2 + -1.41367e+5 / 500)) + 1) ** 2 * (lambda ** 2 * (-81911 / 6250 / (lambda ** 2 + -1.41367e+5 / 500) ** 2 + 3 * (-1141 / 250 / (lambda ** 2 + -237 / 20000) ** 2 + -81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) ** 2) + -1141 / 125 / (lambda ** 2 + -237 / 20000) ** 2) + 81911 / 12500 / (lambda ** 2 + -1.41367e+5 / 500) + lambda ** 4 * (2282 / 125 / (lambda ** 2 + -237 / 20000) ** 3 + 81911 / 3125 / (lambda ** 2 + -1.41367e+5 / 500) ** 3) + 1141 / 250 / (lambda ** 2 + -237 / 20000)) / 2) / Math.sqrt(lambda ** 2 * (1141 / 500 / (lambda ** 2 + -237 / 20000) + 81911 / 25000 / (lambda ** 2 + -1.41367e+5 / 500)) + 1) ** 3) / ((2 * Math.PI)**2 * c**3)"},"sqrt(1+1.4313493*lambda**2/(lambda**2-0.0726631**2)+0.65054713*lambda**2/(lambda**2-0.1193242**2)+5.3414021*lambda**2/(lambda**2-18.028251**2))":{"GDu":"(n - lambda * (lambda * (10.6828042 / (lambda ** 2 - 325.017834119001) + 2.8626986 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) + 1.30109426 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13)) + lambda ** 3 * (-(2.8626986 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 2) + -(10.6828042 / (lambda ** 2 - 325.017834119001) ** 2) - 1.30109426 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 2)) / 2 / Math.sqrt(lambda ** 2 * (1.4313493 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) + 0.65054713 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) + 5.3414021 / (lambda ** 2 - 325.017834119001)) + 1)) / c","GDDu":"lambda**3 * ((lambda ** 2 * (3 * (-(2.8626986 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 2) + -(10.6828042 / (lambda ** 2 - 325.017834119001) ** 2) - 1.30109426 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 2) + -(5.7253972 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 2) + -(2.60218852 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 2) - 21.3656084 / (lambda ** 2 - 325.017834119001) ** 2) + lambda ** 4 * (11.4507944 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 3 + 42.7312168 / (lambda ** 2 - 325.017834119001) ** 3 + 5.20437704 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 3) + 2.8626986 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) + 10.6828042 / (lambda ** 2 - 325.017834119001) + 1.30109426 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13)) / 2 + (lambda * (10.6828042 / (lambda ** 2 - 325.017834119001) + 2.8626986 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) + 1.30109426 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13)) + lambda ** 3 * (-(2.8626986 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 2) + -(10.6828042 / (lambda ** 2 - 325.017834119001) ** 2) - 1.30109426 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 2)) * (lambda ** 3 * (-(2.8626986 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 2) + -(1.30109426 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 2) - 10.6828042 / (lambda ** 2 - 325.017834119001) ** 2) + 2 * lambda * (1.4313493 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) + 0.65054713 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) + 5.3414021 / (lambda ** 2 - 325.017834119001))) * -1 / 4 / Math.sqrt(lambda ** 2 * (1.4313493 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) + 0.65054713 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) + 5.3414021 / (lambda ** 2 - 325.017834119001)) + 1) ** 2) / Math.sqrt(lambda ** 2 * (1.4313493 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) + 0.65054713 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) + 5.3414021 / (lambda ** 2 - 325.017834119001)) + 1) / (2 * Math.PI * c**2)","TODu":"(-1) * lambda**4 * (lambda * (((lambda ** 3 * (-(1.30109426 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 2) + -(10.6828042 / (lambda ** 2 - 325.017834119001) ** 2) - 2.8626986 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 2) + 2 * lambda * (1.4313493 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) + 0.65054713 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) + 5.3414021 / (lambda ** 2 - 325.017834119001))) ** 2 * (lambda * (10.6828042 / (lambda ** 2 - 325.017834119001) + 2.8626986 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) + 1.30109426 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13)) + lambda ** 3 * (-(10.6828042 / (lambda ** 2 - 325.017834119001) ** 2) + -(1.30109426 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 2) - 2.8626986 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 2)) * 3 / 8 + Math.sqrt(lambda ** 2 * (1.4313493 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) + 0.65054713 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) + 5.3414021 / (lambda ** 2 - 325.017834119001)) + 1) ** 4 * (lambda * (2 * (3 * (-(10.6828042 / (lambda ** 2 - 325.017834119001) ** 2) + -(1.30109426 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 2) - 2.8626986 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 2) + -(2.60218852 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 2) + -(21.3656084 / (lambda ** 2 - 325.017834119001) ** 2) - 5.7253972 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 2) + -(5.7253972 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 2) + -(21.3656084 / (lambda ** 2 - 325.017834119001) ** 2) - 2.60218852 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 2) + lambda ** 3 * (7 * (11.4507944 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 3 + 42.7312168 / (lambda ** 2 - 325.017834119001) ** 3 + 5.20437704 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 3) + 22.9015888 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 3 + 10.40875408 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 3 + 85.4624336 / (lambda ** 2 - 325.017834119001) ** 3) + lambda ** 5 * (-(68.7047664 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 4) + -(256.3873008 / (lambda ** 2 - 325.017834119001) ** 4) - 31.226262239999997 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 4)) / 2) / Math.sqrt(lambda ** 2 * (1.4313493 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) + 0.65054713 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) + 5.3414021 / (lambda ** 2 - 325.017834119001)) + 1) ** 2 + ((lambda ** 3 * (-(1.30109426 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 2) + -(10.6828042 / (lambda ** 2 - 325.017834119001) ** 2) - 2.8626986 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 2) + 2 * lambda * (1.4313493 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) + 0.65054713 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) + 5.3414021 / (lambda ** 2 - 325.017834119001))) * (2 * ((-(5.20437704 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 3) + -(11.4507944 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 3) - 42.7312168 / (lambda ** 2 - 325.017834119001) ** 3) * lambda ** 4 + (21.3656084 / (lambda ** 2 - 325.017834119001) ** 2 + 5.7253972 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 2 + 2.60218852 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 2 - 3 * (-(10.6828042 / (lambda ** 2 - 325.017834119001) ** 2) + -(1.30109426 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 2) - 2.8626986 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 2)) * lambda ** 2 - 10.6828042 / (lambda ** 2 - 325.017834119001)) + -(5.7253972 / (lambda ** 2 + -5.27992610161e+11 / 1e+14)) - 2.60218852 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13)) - (lambda * (10.6828042 / (lambda ** 2 - 325.017834119001) + 2.8626986 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) + 1.30109426 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13)) + lambda ** 3 * (-(10.6828042 / (lambda ** 2 - 325.017834119001) ** 2) + -(1.30109426 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 2) - 2.8626986 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 2)) * (lambda ** 4 * (11.4507944 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 3 + 5.20437704 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 3 + 42.7312168 / (lambda ** 2 - 325.017834119001) ** 3) + 2 * (lambda ** 2 * (-(2.8626986 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 2) + -(1.30109426 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 2) - 10.6828042 / (lambda ** 2 - 325.017834119001) ** 2) + 1.4313493 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) + 0.65054713 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) + 5.3414021 / (lambda ** 2 - 325.017834119001)) + 3 * lambda ** 2 * (-(1.30109426 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 2) + -(10.6828042 / (lambda ** 2 - 325.017834119001) ** 2) - 2.8626986 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 2))) / 4) / Math.sqrt(lambda ** 2 * (1.4313493 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) + 0.65054713 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) + 5.3414021 / (lambda ** 2 - 325.017834119001)) + 1) ** 3 + 3 * ((lambda ** 2 * (3 * (-(2.8626986 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 2) + -(10.6828042 / (lambda ** 2 - 325.017834119001) ** 2) - 1.30109426 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 2) + -(5.7253972 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 2) + -(2.60218852 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 2) - 21.3656084 / (lambda ** 2 - 325.017834119001) ** 2) + lambda ** 4 * (11.4507944 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 3 + 42.7312168 / (lambda ** 2 - 325.017834119001) ** 3 + 5.20437704 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 3) + 2.8626986 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) + 10.6828042 / (lambda ** 2 - 325.017834119001) + 1.30109426 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13)) / 2 + (lambda * (10.6828042 / (lambda ** 2 - 325.017834119001) + 2.8626986 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) + 1.30109426 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13)) + lambda ** 3 * (-(2.8626986 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 2) + -(10.6828042 / (lambda ** 2 - 325.017834119001) ** 2) - 1.30109426 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 2)) * (lambda ** 3 * (-(2.8626986 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) ** 2) + -(1.30109426 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) ** 2) - 10.6828042 / (lambda ** 2 - 325.017834119001) ** 2) + 2 * lambda * (1.4313493 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) + 0.65054713 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) + 5.3414021 / (lambda ** 2 - 325.017834119001))) * -1 / 4 / Math.sqrt(lambda ** 2 * (1.4313493 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) + 0.65054713 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) + 5.3414021 / (lambda ** 2 - 325.017834119001)) + 1) ** 2) / Math.sqrt(lambda ** 2 * (1.4313493 / (lambda ** 2 + -5.27992610161e+11 / 1e+14) + 0.65054713 / (lambda ** 2 + -3.55956617641e+11 / 2.5e+13) + 5.3414021 / (lambda ** 2 - 325.017834119001)) + 1)) / ((2 * Math.PI)**2 * c**3)"},"sqrt(1+1.5039759*lambda**2/(lambda**2-0.0740288**2)+0.55069141*lambda**2/(lambda**2-0.1216529**2)+6.5927379*lambda**2/(lambda**2-20.072248**2))":{"GDu":"(n - lambda * (lambda * (13.1854758 / (lambda ** 2 - 402.89513977350396) + 3.0079518 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) + 1.10138282 / (lambda ** 2 + -1.479942807841e+12 / 1e+14)) + lambda ** 3 * (-(3.0079518 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 2) + -(13.1854758 / (lambda ** 2 - 402.89513977350396) ** 2) - 1.10138282 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 2)) / 2 / Math.sqrt(lambda ** 2 * (1.5039759 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) + 0.55069141 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) + 6.5927379 / (lambda ** 2 - 402.89513977350396)) + 1)) / c","GDDu":"lambda**3 * ((lambda ** 2 * (3 * (-(3.0079518 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 2) + -(13.1854758 / (lambda ** 2 - 402.89513977350396) ** 2) - 1.10138282 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 2) + -(6.0159036 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 2) + -(2.20276564 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 2) - 26.3709516 / (lambda ** 2 - 402.89513977350396) ** 2) + lambda ** 4 * (12.0318072 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 3 + 52.7419032 / (lambda ** 2 - 402.89513977350396) ** 3 + 4.40553128 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 3) + 3.0079518 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) + 13.1854758 / (lambda ** 2 - 402.89513977350396) + 1.10138282 / (lambda ** 2 + -1.479942807841e+12 / 1e+14)) / 2 + (lambda * (13.1854758 / (lambda ** 2 - 402.89513977350396) + 3.0079518 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) + 1.10138282 / (lambda ** 2 + -1.479942807841e+12 / 1e+14)) + lambda ** 3 * (-(3.0079518 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 2) + -(13.1854758 / (lambda ** 2 - 402.89513977350396) ** 2) - 1.10138282 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 2)) * (lambda ** 3 * (-(3.0079518 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 2) + -(1.10138282 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 2) - 13.1854758 / (lambda ** 2 - 402.89513977350396) ** 2) + 2 * lambda * (1.5039759 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) + 0.55069141 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) + 6.5927379 / (lambda ** 2 - 402.89513977350396))) * -1 / 4 / Math.sqrt(lambda ** 2 * (1.5039759 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) + 0.55069141 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) + 6.5927379 / (lambda ** 2 - 402.89513977350396)) + 1) ** 2) / Math.sqrt(lambda ** 2 * (1.5039759 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) + 0.55069141 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) + 6.5927379 / (lambda ** 2 - 402.89513977350396)) + 1) / (2 * Math.PI * c**2)","TODu":"(-1) * lambda**4 * (lambda * (((lambda ** 3 * (-(1.10138282 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 2) + -(13.1854758 / (lambda ** 2 - 402.89513977350396) ** 2) - 3.0079518 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 2) + 2 * lambda * (1.5039759 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) + 0.55069141 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) + 6.5927379 / (lambda ** 2 - 402.89513977350396))) ** 2 * (lambda * (13.1854758 / (lambda ** 2 - 402.89513977350396) + 3.0079518 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) + 1.10138282 / (lambda ** 2 + -1.479942807841e+12 / 1e+14)) + lambda ** 3 * (-(13.1854758 / (lambda ** 2 - 402.89513977350396) ** 2) + -(1.10138282 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 2) - 3.0079518 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 2)) * 3 / 8 + Math.sqrt(lambda ** 2 * (1.5039759 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) + 0.55069141 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) + 6.5927379 / (lambda ** 2 - 402.89513977350396)) + 1) ** 4 * (lambda * (2 * (3 * (-(13.1854758 / (lambda ** 2 - 402.89513977350396) ** 2) + -(1.10138282 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 2) - 3.0079518 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 2) + -(2.20276564 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 2) + -(26.3709516 / (lambda ** 2 - 402.89513977350396) ** 2) - 6.0159036 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 2) + -(6.0159036 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 2) + -(26.3709516 / (lambda ** 2 - 402.89513977350396) ** 2) - 2.20276564 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 2) + lambda ** 3 * (7 * (12.0318072 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 3 + 52.7419032 / (lambda ** 2 - 402.89513977350396) ** 3 + 4.40553128 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 3) + 24.0636144 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 3 + 8.81106256 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 3 + 105.4838064 / (lambda ** 2 - 402.89513977350396) ** 3) + lambda ** 5 * (-(72.19084319999999 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 4) + -(316.45141920000003 / (lambda ** 2 - 402.89513977350396) ** 4) - 26.43318768 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 4)) / 2) / Math.sqrt(lambda ** 2 * (1.5039759 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) + 0.55069141 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) + 6.5927379 / (lambda ** 2 - 402.89513977350396)) + 1) ** 2 + ((lambda ** 3 * (-(1.10138282 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 2) + -(13.1854758 / (lambda ** 2 - 402.89513977350396) ** 2) - 3.0079518 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 2) + 2 * lambda * (1.5039759 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) + 0.55069141 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) + 6.5927379 / (lambda ** 2 - 402.89513977350396))) * (2 * ((-(4.40553128 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 3) + -(12.0318072 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 3) - 52.7419032 / (lambda ** 2 - 402.89513977350396) ** 3) * lambda ** 4 + (26.3709516 / (lambda ** 2 - 402.89513977350396) ** 2 + 6.0159036 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 2 + 2.20276564 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 2 - 3 * (-(13.1854758 / (lambda ** 2 - 402.89513977350396) ** 2) + -(1.10138282 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 2) - 3.0079518 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 2)) * lambda ** 2 - 13.1854758 / (lambda ** 2 - 402.89513977350396)) + -(6.0159036 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10)) - 2.20276564 / (lambda ** 2 + -1.479942807841e+12 / 1e+14)) - (lambda * (13.1854758 / (lambda ** 2 - 402.89513977350396) + 3.0079518 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) + 1.10138282 / (lambda ** 2 + -1.479942807841e+12 / 1e+14)) + lambda ** 3 * (-(13.1854758 / (lambda ** 2 - 402.89513977350396) ** 2) + -(1.10138282 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 2) - 3.0079518 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 2)) * (lambda ** 4 * (12.0318072 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 3 + 4.40553128 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 3 + 52.7419032 / (lambda ** 2 - 402.89513977350396) ** 3) + 2 * (lambda ** 2 * (-(3.0079518 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 2) + -(1.10138282 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 2) - 13.1854758 / (lambda ** 2 - 402.89513977350396) ** 2) + 1.5039759 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) + 0.55069141 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) + 6.5927379 / (lambda ** 2 - 402.89513977350396)) + 3 * lambda ** 2 * (-(1.10138282 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 2) + -(13.1854758 / (lambda ** 2 - 402.89513977350396) ** 2) - 3.0079518 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 2))) / 4) / Math.sqrt(lambda ** 2 * (1.5039759 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) + 0.55069141 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) + 6.5927379 / (lambda ** 2 - 402.89513977350396)) + 1) ** 3 + 3 * ((lambda ** 2 * (3 * (-(3.0079518 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 2) + -(13.1854758 / (lambda ** 2 - 402.89513977350396) ** 2) - 1.10138282 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 2) + -(6.0159036 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 2) + -(2.20276564 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 2) - 26.3709516 / (lambda ** 2 - 402.89513977350396) ** 2) + lambda ** 4 * (12.0318072 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 3 + 52.7419032 / (lambda ** 2 - 402.89513977350396) ** 3 + 4.40553128 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 3) + 3.0079518 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) + 13.1854758 / (lambda ** 2 - 402.89513977350396) + 1.10138282 / (lambda ** 2 + -1.479942807841e+12 / 1e+14)) / 2 + (lambda * (13.1854758 / (lambda ** 2 - 402.89513977350396) + 3.0079518 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) + 1.10138282 / (lambda ** 2 + -1.479942807841e+12 / 1e+14)) + lambda ** 3 * (-(3.0079518 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 2) + -(13.1854758 / (lambda ** 2 - 402.89513977350396) ** 2) - 1.10138282 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 2)) * (lambda ** 3 * (-(3.0079518 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) ** 2) + -(1.10138282 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) ** 2) - 13.1854758 / (lambda ** 2 - 402.89513977350396) ** 2) + 2 * lambda * (1.5039759 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) + 0.55069141 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) + 6.5927379 / (lambda ** 2 - 402.89513977350396))) * -1 / 4 / Math.sqrt(lambda ** 2 * (1.5039759 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) + 0.55069141 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) + 6.5927379 / (lambda ** 2 - 402.89513977350396)) + 1) ** 2) / Math.sqrt(lambda ** 2 * (1.5039759 / (lambda ** 2 + -1.33795489e+8 / 2.44140625e+10) + 0.55069141 / (lambda ** 2 + -1.479942807841e+12 / 1e+14) + 6.5927379 / (lambda ** 2 - 402.89513977350396)) + 1)) / ((2 * Math.PI)**2 * c**3)"},"sqrt(11.67316+1/lambda**2+0.004482633/(lambda**2-1.108205**2))":{"GDu":"(n - lambda * (-(0.008965266 * lambda ** 4 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2) - 2) / 2 / lambda ** 3 / Math.sqrt(1 / lambda ** 2 + 0.004482633 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) + 2.91829e+5 / 25000)) / c","GDDu":"lambda**3 * ((0.008965266 * lambda ** 4 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2 + 2) * (-(0.008965266 * lambda ** 4 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2) - 2) / 4 + Math.sqrt(1 / lambda ** 2 + 0.004482633 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) + 2.91829e+5 / 25000) ** 2 * ((0.035861064 * lambda ** 8 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) - 0.035861064 * lambda ** 6) / 2 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2 + (-(0.008965266 * lambda ** 6 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2) - 2 * lambda ** 2) * -3 / 2)) * lambda ** (-6) / Math.sqrt(1 / lambda ** 2 + 0.004482633 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) + 2.91829e+5 / 25000) ** 3 / (2 * Math.PI * c**2)","TODu":"(-1) * lambda**4 * (lambda * ((6 * ((-(0.008965266 * lambda ** 4 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2) - 2) ** 2 / 4 + ((0.035861064 * lambda ** 6 - 0.035861064 * lambda ** 8 / (lambda ** 2 + -4.9124732881e+10 / 4e+10)) / 2 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2 + (-(0.008965266 * lambda ** 6 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2) - 2 * lambda ** 2) * 3 / 2) * Math.sqrt(1 / lambda ** 2 + 0.004482633 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) + 2.91829e+5 / 25000) ** 2) + 2 * (-(0.008965266 * lambda ** 4 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2) - 2) * ((0.035861064 * lambda ** 8 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) - 0.035861064 * lambda ** 6) / 4 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2 + (-(0.008965266 * lambda ** 6 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2) - 2 * lambda ** 2) * -3 / 4) / lambda ** 2 + lambda * (((-(0.008965266 * lambda ** 4 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2) - 2) * (0.035861064 * lambda ** 3 - 0.035861064 * lambda ** 5 / (lambda ** 2 + -4.9124732881e+10 / 4e+10)) / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2 + (0.035861064 * lambda ** 5 - 0.035861064 * (lambda ** 2 + -4.9124732881e+10 / 4e+10) * lambda ** 3) * (0.008965266 * lambda ** 4 + 2 * (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2) / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 5) / 4 + Math.sqrt(1 / lambda ** 2 + 0.004482633 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) + 2.91829e+5 / 25000) ** 2 * (((0.286888512 * (lambda ** 2 + -4.9124732881e+10 / 4e+10) * lambda ** 7 + -(0.215166384 * (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2 * lambda ** 5) - 0.071722128 * lambda ** 9) / 2 - 2 * (0.035861064 * lambda ** 9 - 0.035861064 * (lambda ** 2 + -4.9124732881e+10 / 4e+10) * lambda ** 7)) / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 4 + ((0.035861064 * lambda ** 7 - 0.053791596 * (lambda ** 2 + -4.9124732881e+10 / 4e+10) * lambda ** 5) / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 3 - 4 * lambda) * -3 / 2))) / lambda ** 7 + ((-(0.008965266 * lambda ** 4 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2) - 2) ** 2 * (0.008965266 * lambda ** 4 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2 + 2) / 4 + Math.sqrt(1 / lambda ** 2 + 0.004482633 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) + 2.91829e+5 / 25000) ** 2 * (-(0.008965266 * lambda ** 4 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2) - 2) * ((0.035861064 * lambda ** 8 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) - 0.035861064 * lambda ** 6) / 2 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2 + (-(0.008965266 * lambda ** 6 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2) - 2 * lambda ** 2) * -3 / 2)) * lambda ** (-9) * -3 / 2 / Math.sqrt(1 / lambda ** 2 + 0.004482633 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) + 2.91829e+5 / 25000) ** 2) / Math.sqrt(1 / lambda ** 2 + 0.004482633 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) + 2.91829e+5 / 25000) ** 3 + 3 * ((0.008965266 * lambda ** 4 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2 + 2) * (-(0.008965266 * lambda ** 4 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2) - 2) / 4 + Math.sqrt(1 / lambda ** 2 + 0.004482633 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) + 2.91829e+5 / 25000) ** 2 * ((0.035861064 * lambda ** 8 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) - 0.035861064 * lambda ** 6) / 2 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2 + (-(0.008965266 * lambda ** 6 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) ** 2) - 2 * lambda ** 2) * -3 / 2)) * lambda ** (-6) / Math.sqrt(1 / lambda ** 2 + 0.004482633 / (lambda ** 2 + -4.9124732881e+10 / 4e+10) + 2.91829e+5 / 25000) ** 3) / ((2 * Math.PI)**2 * c**3)"},"sqrt(9.28156+6.7288*lambda**2/(lambda**2-0.44105)+0.21307*lambda**2/(lambda**2-3870.1))":{"GDu":"(n - lambda * (lambda ** 3 * (-8411 / 625 / (lambda ** 2 + -8821 / 20000) ** 2 + -21307 / 50000 / (lambda ** 2 + -38701 / 10) ** 2) + lambda * (8411 / 625 / (lambda ** 2 + -8821 / 20000) + 21307 / 50000 / (lambda ** 2 + -38701 / 10))) / 2 / Math.sqrt(lambda ** 2 * (8411 / 1250 / (lambda ** 2 + -8821 / 20000) + 21307 / 1e+5 / (lambda ** 2 + -38701 / 10)) + 2.32039e+5 / 25000)) / c","GDDu":"lambda**3 * ((lambda ** 3 * (-8411 / 625 / (lambda ** 2 + -8821 / 20000) ** 2 + -21307 / 50000 / (lambda ** 2 + -38701 / 10) ** 2) + lambda * (8411 / 625 / (lambda ** 2 + -8821 / 20000) + 21307 / 50000 / (lambda ** 2 + -38701 / 10))) * (lambda ** 3 * (-8411 / 625 / (lambda ** 2 + -8821 / 20000) ** 2 + -21307 / 50000 / (lambda ** 2 + -38701 / 10) ** 2) + 2 * lambda * (8411 / 1250 / (lambda ** 2 + -8821 / 20000) + 21307 / 1e+5 / (lambda ** 2 + -38701 / 10))) * -1 / 4 + Math.sqrt(lambda ** 2 * (8411 / 1250 / (lambda ** 2 + -8821 / 20000) + 21307 / 1e+5 / (lambda ** 2 + -38701 / 10)) + 2.32039e+5 / 25000) ** 2 * (lambda ** 2 * (-21307 / 25000 / (lambda ** 2 + -38701 / 10) ** 2 + 3 * (-8411 / 625 / (lambda ** 2 + -8821 / 20000) ** 2 + -21307 / 50000 / (lambda ** 2 + -38701 / 10) ** 2) + -16822 / 625 / (lambda ** 2 + -8821 / 20000) ** 2) + 21307 / 50000 / (lambda ** 2 + -38701 / 10) + lambda ** 4 * (33644 / 625 / (lambda ** 2 + -8821 / 20000) ** 3 + 21307 / 12500 / (lambda ** 2 + -38701 / 10) ** 3) + 8411 / 625 / (lambda ** 2 + -8821 / 20000)) / 2) / Math.sqrt(lambda ** 2 * (8411 / 1250 / (lambda ** 2 + -8821 / 20000) + 21307 / 1e+5 / (lambda ** 2 + -38701 / 10)) + 2.32039e+5 / 25000) ** 3 / (2 * Math.PI * c**2)","TODu":"(-1) * lambda**4 * (lambda * ((lambda ** 3 * (7 * (33644 / 625 / (lambda ** 2 + -8821 / 20000) ** 3 + 21307 / 12500 / (lambda ** 2 + -38701 / 10) ** 3) + 67288 / 625 / (lambda ** 2 + -8821 / 20000) ** 3 + 21307 / 6250 / (lambda ** 2 + -38701 / 10) ** 3) + lambda * (-16822 / 625 / (lambda ** 2 + -8821 / 20000) ** 2 + 2 * (-21307 / 25000 / (lambda ** 2 + -38701 / 10) ** 2 + 3 * (-8411 / 625 / (lambda ** 2 + -8821 / 20000) ** 2 + -21307 / 50000 / (lambda ** 2 + -38701 / 10) ** 2) + -16822 / 625 / (lambda ** 2 + -8821 / 20000) ** 2) + -21307 / 25000 / (lambda ** 2 + -38701 / 10) ** 2) + lambda ** 5 * (-63921 / 6250 / (lambda ** 2 + -38701 / 10) ** 4 + -2.01864e+5 / 625 / (lambda ** 2 + -8821 / 20000) ** 4)) / 2 + 3 * (((8411 / 625 / (lambda ** 2 + -8821 / 20000) ** 2 + 21307 / 50000 / (lambda ** 2 + -38701 / 10) ** 2) * lambda ** 3 - 2 * lambda * (8411 / 1250 / (lambda ** 2 + -8821 / 20000) + 21307 / 1e+5 / (lambda ** 2 + -38701 / 10))) * (lambda ** 2 * (-21307 / 25000 / (lambda ** 2 + -38701 / 10) ** 2 + 3 * (-8411 / 625 / (lambda ** 2 + -8821 / 20000) ** 2 + -21307 / 50000 / (lambda ** 2 + -38701 / 10) ** 2) + -16822 / 625 / (lambda ** 2 + -8821 / 20000) ** 2) + 21307 / 50000 / (lambda ** 2 + -38701 / 10) + lambda ** 4 * (33644 / 625 / (lambda ** 2 + -8821 / 20000) ** 3 + 21307 / 12500 / (lambda ** 2 + -38701 / 10) ** 3) + 8411 / 625 / (lambda ** 2 + -8821 / 20000)) / 4 + (lambda ** 3 * (-8411 / 625 / (lambda ** 2 + -8821 / 20000) ** 2 + -21307 / 50000 / (lambda ** 2 + -38701 / 10) ** 2) + 2 * lambda * (8411 / 1250 / (lambda ** 2 + -8821 / 20000) + 21307 / 1e+5 / (lambda ** 2 + -38701 / 10))) ** 2 * (lambda ** 3 * (-8411 / 625 / (lambda ** 2 + -8821 / 20000) ** 2 + -21307 / 50000 / (lambda ** 2 + -38701 / 10) ** 2) + lambda * (8411 / 625 / (lambda ** 2 + -8821 / 20000) + 21307 / 50000 / (lambda ** 2 + -38701 / 10))) / 8 / Math.sqrt(lambda ** 2 * (8411 / 1250 / (lambda ** 2 + -8821 / 20000) + 21307 / 1e+5 / (lambda ** 2 + -38701 / 10)) + 2.32039e+5 / 25000) ** 2) / Math.sqrt(lambda ** 2 * (8411 / 1250 / (lambda ** 2 + -8821 / 20000) + 21307 / 1e+5 / (lambda ** 2 + -38701 / 10)) + 2.32039e+5 / 25000) ** 2 + ((lambda ** 3 * (-8411 / 625 / (lambda ** 2 + -8821 / 20000) ** 2 + -21307 / 50000 / (lambda ** 2 + -38701 / 10) ** 2) + 2 * lambda * (8411 / 1250 / (lambda ** 2 + -8821 / 20000) + 21307 / 1e+5 / (lambda ** 2 + -38701 / 10))) * (lambda ** 2 * (-21307 / 25000 / (lambda ** 2 + -38701 / 10) ** 2 + 3 * (-8411 / 625 / (lambda ** 2 + -8821 / 20000) ** 2 + -21307 / 50000 / (lambda ** 2 + -38701 / 10) ** 2) + -16822 / 625 / (lambda ** 2 + -8821 / 20000) ** 2) + 21307 / 50000 / (lambda ** 2 + -38701 / 10) + lambda ** 4 * (33644 / 625 / (lambda ** 2 + -8821 / 20000) ** 3 + 21307 / 12500 / (lambda ** 2 + -38701 / 10) ** 3) + 8411 / 625 / (lambda ** 2 + -8821 / 20000)) / 2 + ((lambda ** 2 * (-21307 / 25000 / (lambda ** 2 + -38701 / 10) ** 2 + 3 * (-8411 / 625 / (lambda ** 2 + -8821 / 20000) ** 2 + -21307 / 50000 / (lambda ** 2 + -38701 / 10) ** 2) + -16822 / 625 / (lambda ** 2 + -8821 / 20000) ** 2) + 21307 / 50000 / (lambda ** 2 + -38701 / 10) + lambda ** 4 * (33644 / 625 / (lambda ** 2 + -8821 / 20000) ** 3 + 21307 / 12500 / (lambda ** 2 + -38701 / 10) ** 3) + 8411 / 625 / (lambda ** 2 + -8821 / 20000)) * (lambda ** 3 * (-8411 / 625 / (lambda ** 2 + -8821 / 20000) ** 2 + -21307 / 50000 / (lambda ** 2 + -38701 / 10) ** 2) + 2 * lambda * (8411 / 1250 / (lambda ** 2 + -8821 / 20000) + 21307 / 1e+5 / (lambda ** 2 + -38701 / 10))) + (lambda ** 3 * (-8411 / 625 / (lambda ** 2 + -8821 / 20000) ** 2 + -21307 / 50000 / (lambda ** 2 + -38701 / 10) ** 2) + lambda * (8411 / 625 / (lambda ** 2 + -8821 / 20000) + 21307 / 50000 / (lambda ** 2 + -38701 / 10))) * (5 * lambda ** 2 * (-8411 / 625 / (lambda ** 2 + -8821 / 20000) ** 2 + -21307 / 50000 / (lambda ** 2 + -38701 / 10) ** 2) + lambda ** 4 * (33644 / 625 / (lambda ** 2 + -8821 / 20000) ** 3 + 21307 / 12500 / (lambda ** 2 + -38701 / 10) ** 3) + 2 * (8411 / 1250 / (lambda ** 2 + -8821 / 20000) + 21307 / 1e+5 / (lambda ** 2 + -38701 / 10)))) * -1 / 4) / Math.sqrt(lambda ** 2 * (8411 / 1250 / (lambda ** 2 + -8821 / 20000) + 21307 / 1e+5 / (lambda ** 2 + -38701 / 10)) + 2.32039e+5 / 25000) ** 2) / Math.sqrt(lambda ** 2 * (8411 / 1250 / (lambda ** 2 + -8821 / 20000) + 21307 / 1e+5 / (lambda ** 2 + -38701 / 10)) + 2.32039e+5 / 25000) + 3 * ((lambda ** 3 * (-8411 / 625 / (lambda ** 2 + -8821 / 20000) ** 2 + -21307 / 50000 / (lambda ** 2 + -38701 / 10) ** 2) + lambda * (8411 / 625 / (lambda ** 2 + -8821 / 20000) + 21307 / 50000 / (lambda ** 2 + -38701 / 10))) * (lambda ** 3 * (-8411 / 625 / (lambda ** 2 + -8821 / 20000) ** 2 + -21307 / 50000 / (lambda ** 2 + -38701 / 10) ** 2) + 2 * lambda * (8411 / 1250 / (lambda ** 2 + -8821 / 20000) + 21307 / 1e+5 / (lambda ** 2 + -38701 / 10))) * -1 / 4 + Math.sqrt(lambda ** 2 * (8411 / 1250 / (lambda ** 2 + -8821 / 20000) + 21307 / 1e+5 / (lambda ** 2 + -38701 / 10)) + 2.32039e+5 / 25000) ** 2 * (lambda ** 2 * (-21307 / 25000 / (lambda ** 2 + -38701 / 10) ** 2 + 3 * (-8411 / 625 / (lambda ** 2 + -8821 / 20000) ** 2 + -21307 / 50000 / (lambda ** 2 + -38701 / 10) ** 2) + -16822 / 625 / (lambda ** 2 + -8821 / 20000) ** 2) + 21307 / 50000 / (lambda ** 2 + -38701 / 10) + lambda ** 4 * (33644 / 625 / (lambda ** 2 + -8821 / 20000) ** 3 + 21307 / 12500 / (lambda ** 2 + -38701 / 10) ** 3) + 8411 / 625 / (lambda ** 2 + -8821 / 20000)) / 2) / Math.sqrt(lambda ** 2 * (8411 / 1250 / (lambda ** 2 + -8821 / 20000) + 21307 / 1e+5 / (lambda ** 2 + -38701 / 10)) + 2.32039e+5 / 25000) ** 3) / ((2 * Math.PI)**2 * c**3)"}}